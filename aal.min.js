!async function() {
    window.addEventListener("error", onGeneralError),
    window.addEventListener("resize", onResize),
    window.addEventListener("focus", onFocus),
    window.addEventListener("drop", onDrop);
    const LIBRARY_VERSION = "1.11.5"
      , ADL_VERSION = "2.1.0"
      , SCORES_LIBRARY_VERSION = "1.2.1"
      , ANALYTICS_ENDPOINT = "https://www.google-analytics.com/collect"
      , APE_ACCOUNTS_API = "https://accounts.ape-apps.com/api.php"
      , STAT_LOGGER_API_STAT = "https://stats.ape-apps.com/logstat.php"
      , STAT_LOGGER_API_SALE = "https://stats.ape-apps.com/logsale.php"
      , STAT_LOGGER_API_ERROR = "https://stats.ape-apps.com/logerror.php"
      , PLATFORM_CODES = {
        NONE: 0,
        APE_MARKET: 1,
        GOOGLE_PLAY: 2,
        AMAZON: 3,
        APPLE: 4,
        WINDOWS: 6,
        APE_WEB_APPS: 10,
        FACEBOOK: 13,
        CHROME: 14,
        STEAM: 15,
        APE_LAUNCHER: 16,
        KONGREGATE: 17,
        SOUNDBOARD_CITY: 18,
        APE_VR_LAUNCHER: 19,
        APE_TV_LAUNCHER: 20,
        APE_FORUMS: 21,
        EZ_OFFICE_LAUNCHER: 22,
        STORE_APP: 23,
        CRAZY_GAMES: 24
    }
      , ANALYTICS_GLOBAL_TRACKER = "UA-45551194-16"
      , SECOND = 1e3
      , MINUTE = 6e4
      , HOUR = 36e5;
    window.apeApps || (window.apeApps = {}),
    window.apeApps.library || (window.apeApps.library = ApeAppsLibrary);
    let wacUtilsParentWindowId = null
      , coinBuyCallback = null
      , coinBuyWindow = null
      , iapWindow = null
      , currentAppScale = 1
      , hostFileImportCallbacks = {}
      , hostFileImportCallbacksCounter = 0
      , purchWasPending = !1
      , allInstances = {}
      , iosPremiumStatus = "0"
      , isUWPChild = !1
      , probableWebview2 = !1
      , lastTitleBarColor = null
      , hostCheckTimeout = null
      , steamCredentials = null
      , wacUtils = null;
    function ApeAppsLibrary(options) {
        this.apeMarketId = 0,
        this.apeAccountKey = null,
        this.appName = null,
        this.platform = PLATFORM_CODES.NONE,
        this.isTV = !1,
        this.isVR = !1,
        this.subplatform = null,
        this.version = "1.0.0",
        this.analytics = null,
        this.uuid = guid(),
        this.installSource = null,
        this.appData = null,
        this.loginCreds = null,
        this.profileData = null,
        this.launchReferrer = null,
        this.betaMode = !1,
        this.hasNativeUtils = !1,
        this.launchFiles = [],
        this.price = 0,
        this.adsOnHost = !1,
        this.wspo = !1,
        this.gameId = 0,
        this.updateYear = (new Date).getFullYear(),
        this.parentId = null,
        this.launchData = null,
        this.isGame = !1,
        this.steamAppId = 0,
        this.playGamesUser = null,
        this.pendingSteamPurchase = !1,
        this.gpPrmSku = null,
        this.amzPrmSku = null,
        this.iosPrmSku = null,
        this.winPrmSku = null,
        this.adsterraUnits = null,
        this.montaginterstitial = null,
        this.hostedParentListeners = [],
        this.rateLinks = {},
        this.apeCoinSKUs = {
            gplay: [],
            amazon: [],
            ios: [],
            winstore: []
        },
        this.srvAndRelCd = 0,
        this.pkgAndRelCd = 0,
        this.currentXboxInfo = null,
        (window.Android || window.webkit && window.webkit.messageHandlers) && (window.apeApps.wacBridge && window.apeApps.wacBridge.areAdsOnParent && (this.adsOnHost = window.apeApps.wacBridge.areAdsOnParent()),
        setupHostedListeners()),
        this.onInit = null,
        this.onLogin = null,
        this.onPremium = null,
        this.onLaunchData = null,
        this.getLibraryVersion = function() {
            return "1.11.5"
        }
        ,
        this.getPlatformCodes = function() {
            return PLATFORM_CODES
        }
        ,
        this.guid = guid,
        this.getMarketName = getMarketName,
        this.presentLogin = presentLogin,
        this.signOutOfApeApps = signOutOfApeApps,
        this.goPremium = goPremium,
        this.showApeCoinFlow = showApeCoinFlow,
        this.isUserPremium = isUserPremium,
        this.showLoggedUserSidebar = showLoggedUserSidebar,
        this.showFeedbackDialog = showFeedbackDialog,
        this.numberWithCommas = numberWithCommas,
        this.replaceAll = replaceAll,
        this.showHostBanner = showHostBanner,
        this.removeHostBanner = removeHostBanner,
        this.hostPremiumChange = hostPremiumChange,
        this.showGenericAboutWindow = showGenericAboutWindow,
        this.quitApplication = quitApplication,
        this.getTokensURL = getTokensURL,
        this.isPremiumAvailable = isPremiumAvailable,
        this.spendApeCoins = spendApeCoins,
        this.pingForRating = pingForRating,
        this.getDiscordLink = getDiscordLink,
        this.handleLicenseKeyData = handleLicenseKeyData,
        options.appName && (this.appName = options.appName),
        options.installSource && (this.installSource = options.installSource),
        options.analytics && (this.analytics = options.analytics),
        options.version && (this.version = options.version),
        options.tv && (this.isTV = options.tv),
        options.subplatform && (this.subplatform = options.subplatform),
        options.platform && (this.platform = options.platform),
        options.apeMarket && (this.apeMarketId = options.apeMarket),
        options.accountGUID && (this.apeAccountKey = options.accountGUID),
        options.onInit && (this.onInit = options.onInit),
        options.onLogin && (this.onLogin = options.onLogin),
        options.onPremium && (this.onPremium = options.onPremium),
        options.onLaunchData && (this.onLaunchData = options.onLaunchData);
        let withADL = !1;
        options.withADL && (withADL = !0);
        let instance = this;
        this.postMsgToApeParent = function(method, data) {
            postMsgToApeParent(instance, method, data)
        }
        ,
        window.Android && window.Android.getPlatform && (instance.platform = parseInt(Android.getPlatform())),
        window.webkit && window.webkit.messageHandlers && (instance.platform = 4),
        window.addEventListener("message", (function(e) {
            onInstanceMessage(instance, e)
        }
        )),
        wacUtils && wacUtils.setOnMessageListener((function(e, data) {
            onInstanceHostMessage(instance, e, data)
        }
        )),
        getAppInfo(instance, (function() {
            !instance.gameId || 0 == parseInt(instance.gameId) || window.apeApps.highscores ? initLibrary(instance, withADL) : loadScoresLibrary((function() {
                initLibrary(instance, withADL)
            }
            ))
        }
        )),
        allInstances[instance.uuid] = instance
    }
    function loadScoresLibrary(callback) {
        let scoresScript = document.createElement("script");
        scoresScript.onload = function() {
            callback()
        }
        ,
        scoresScript.src = "https://cdn.apewebapps.com/aahs/1.2.1/aahs.min.js",
        document.head.appendChild(scoresScript)
    }
    function initLibrary(instance, withADL) {
        if (withADL && !window.adl) {
            let adlScript = document.createElement("script");
            adlScript.onload = function() {
                adl.addADLStyle(),
                adl.addIonicons(),
                adl.initADL(),
                checkHostInit(instance)
            }
            ,
            adlScript.src = "https://cdn.apewebapps.com/adl/2.1.0/js/adl.min.js",
            document.head.appendChild(adlScript)
        } else
            checkHostInit(instance)
    }
    function checkHostInit(instance) {
        window.chrome && window.chrome.webview && window.chrome.webview.postMessage ? (probableWebview2 = !0,
        hostCheckTimeout = setTimeout((function() {
            continueInstanceInit(instance)
        }
        ), 1e3),
        window.chrome.webview.addEventListener("message", (function(message) {
            onUWPMessage(instance, message)
        }
        )),
        window.chrome.webview.postMessage({
            type: "hostCheck",
            data: null
        })) : continueInstanceInit(instance)
    }
    async function continueInstanceInit(instance) {
        if (hostCheckTimeout)
            try {
                clearTimeout(hostCheckTimeout)
            } catch (ex) {
                console.log(ex)
            }
        if (hostCheckTimeout = null,
        !instance.subplatform) {
            if (instance.subplatform = "desktop",
            window.innerWidth <= 500)
                instance.subplatform = "phone";
            else {
                let isiPad = null != navigator.userAgent.match(/iPad/i)
                  , isAndroid = null != navigator.userAgent.match(/Android/i);
                (isiPad || isAndroid) && (instance.subplatform = "tablet")
            }
            instance.isTV && (instance.subplatform = "tv")
        }
        const urlSearchParams = new URLSearchParams(window.location.search)
          , params = Object.fromEntries(urlSearchParams.entries());
        if (document.referrer && document.referrer.trim().length > 0 && (instance.launchReferrer = document.referrer.trim()),
        instance.launchReferrer && instance.launchReferrer.indexOf("platform/microsoft-store") > -1 && (instance.platform = PLATFORM_CODES.WINDOWS),
        (isUWPChild || probableWebview2) && (instance.platform = PLATFORM_CODES.WINDOWS),
        params) {
            if (params.awacg && "1" == params.awacg && (instance.platform = PLATFORM_CODES.CRAZY_GAMES,
            instance.adsOnHost = !0),
            params.kongregate && "1" == params.kongregate && (instance.platform = PLATFORM_CODES.KONGREGATE,
            instance.adsOnHost = !0),
            params.beta && "1" == params.beta && (instance.betaMode = !0),
            params.aalaunch && (instance.launchData = params.aalaunch),
            params.utm_source) {
                const source = params.utm_source;
                "store.app" == source && (instance.platform = PLATFORM_CODES.STORE_APP)
            }
            if (params["app-install-source"]) {
                const source = params["app-install-source"];
                "microsoft-store" == source && (instance.platform = PLATFORM_CODES.WINDOWS),
                "ez-office" == source && (instance.platform = PLATFORM_CODES.EZ_OFFICE_LAUNCHER),
                "ape-forums" == source && (instance.platform = PLATFORM_CODES.APE_FORUMS),
                "wac-launch" == source && console.log("is child window, get parameters!"),
                "soundboard-city" == source && (instance.platform = PLATFORM_CODES.SOUNDBOARD_CITY),
                params["app-key"] && params["app-key"] == instance.apeAccountKey && ("steam-host" == source && wacUtils && (instance.platform = PLATFORM_CODES.STEAM,
                steamCredentials = await wacUtils.ipcInvoke("getSteamCredentials", null),
                params["steam-tv"] && "1" == params["steam-tv"] && (instance.isTV = !0,
                instance.subplatform = "tv")),
                "ape-launcher" == source && (instance.platform = PLATFORM_CODES.APE_LAUNCHER),
                "ape-market" == source && (instance.platform = PLATFORM_CODES.APE_MARKET),
                "awa-tv" == source && (instance.isTV = !0,
                instance.subplatform = "tv",
                instance.platform = PLATFORM_CODES.APE_TV_LAUNCHER),
                "awa-vr" == source && (instance.isVR = !0,
                instance.subplatform = "vr",
                instance.platform = PLATFORM_CODES.APE_VR_LAUNCHER))
            }
        }
        if (!isInstanceApeChild(instance)) {
            const agent = navigator.userAgent;
            agent && agent.trim().length > 0 && (agent.toLowerCase().indexOf("oculus") > -1 && (instance.isVR = !0,
            instance.subplatform = "vr"),
            agent.toLowerCase().indexOf("xbox") > -1 && (instance.isTV = !0,
            instance.subplatform = "tv"))
        }
        if (wacUtils && (instance.hasNativeUtils = !0),
        window.Android && window.Android.getIsTv && (instance.isTV = window.Android.getIsTv(),
        instance.isTV && (instance.subplatform = "tv")),
        window.Android && window.Android.getPlatform && (instance.platform = parseInt(Android.getPlatform())),
        window.webkit && window.webkit.messageHandlers && (instance.platform = 4),
        window.Android && window.Android.getReleaseCode && (instance.pkgAndRelCd = parseInt(Android.getReleaseCode())),
        instance.platform == PLATFORM_CODES.GOOGLE_PLAY && window.Android && window.Android.getPlayGamesId) {
            let playId = window.Android.getPlayGamesId();
            playId && playId.trim().length > 0 && (instance.playGamesUser = playId.trim())
        }
        logInstanceAnalytics(instance),
        logInstanceStat(instance),
        setInterval((function() {
            logInstanceAnalytics(instance),
            logInstanceStat(instance)
        }
        ), 864e5),
        setInterval((function() {
            updateLogUserPlaytime(instance)
        }
        ), 6e4),
        isInstanceApeChild(instance) && postMsgToApeParent(instance, "getLaunchInfo", {}),
        verifyHostedPremiumStatus(instance),
        initiateSignIn(instance, !0),
        setInterval((function() {
            titleBarColorChecker(instance)
        }
        ), 200)
    }
    function logInstanceAnalytics(instance) {
        if (!navigator.onLine)
            return;
        if (!instance || !instance.appName || !instance.apeMarketId && !instance.analytics)
            return;
        let installFlagName = null
          , analyticsUUID = getAnalyticsUUID(instance)
          , marketName = instance.getMarketName();
        if (instance.apeMarketId ? installFlagName = instance.apeMarketId + "_ah_install_flag" : instance.analytics && (installFlagName = instance.analytics + "_ah_install_flag"),
        !installFlagName)
            return;
        let installFlag = localStorage.getItem(installFlagName);
        installFlag || (installFlag = "0"),
        "0" == installFlag && (instance.analytics && trackEventItem(instance.analytics, "Installation", "Edition", marketName, analyticsUUID, instance.appName, instance.version),
        trackEventItem("UA-45551194-16", "Installation", "Edition", marketName, analyticsUUID, instance.appName, instance.version)),
        localStorage.setItem(installFlagName, "1"),
        instance.launchReferrer && (instance.analytics && trackEventItem(instance.analytics, "PWA Referrer (Client)", instance.launchReferrer, instance.appName, analyticsUUID, instance.appName, instance.version),
        trackEventItem("UA-45551194-16", "PWA Referrer (Client)", instance.launchReferrer, instance.appName, analyticsUUID, instance.appName, instance.version));
        let digitalGoodsSupported = "Supported";
        void 0 === window.getDigitalGoodsService && (digitalGoodsSupported = "Unsupported"),
        instance.analytics && trackEventItem(instance.analytics, "Digital Goods API", digitalGoodsSupported, marketName, analyticsUUID, instance.appName, instance.version),
        trackEventItem("UA-45551194-16", "Digital Goods API", digitalGoodsSupported, marketName, analyticsUUID, instance.appName, instance.version),
        instance.analytics && trackScreenView(instance.analytics, instance.appName + " v" + instance.version, analyticsUUID, instance.appName, instance.version),
        trackScreenView("UA-45551194-16", instance.appName, analyticsUUID, instance.appName, instance.version)
    }
    function getMarketName() {
        let instance = this;
        if (instance.installSource)
            return instance.installSource;
        let marketName = "Ape Market";
        return instance.platform && (instance.platform == PLATFORM_CODES.GOOGLE_PLAY && (marketName = "Google Play"),
        instance.platform == PLATFORM_CODES.AMAZON && (marketName = "Amazon Appstore"),
        instance.platform == PLATFORM_CODES.APPLE && (marketName = "iTunes App Store"),
        instance.platform == PLATFORM_CODES.WINDOWS && (marketName = "Windows Store"),
        instance.platform == PLATFORM_CODES.STEAM && (marketName = "Steam"),
        instance.platform == PLATFORM_CODES.APE_LAUNCHER && (marketName = "Ape Apps Launcher"),
        instance.platform == PLATFORM_CODES.SOUNDBOARD_CITY && (marketName = "Soundboard City"),
        instance.platform == PLATFORM_CODES.APE_VR_LAUNCHER && (marketName = "Ape VR"),
        instance.platform == PLATFORM_CODES.APE_TV_LAUNCHER && (marketName = "Ape Apps Console"),
        instance.platform == PLATFORM_CODES.APE_FORUMS && (marketName = "Ape Forums Embedded"),
        instance.platform == PLATFORM_CODES.EZ_OFFICE_LAUNCHER && (marketName = "EZ Office Launcher")),
        marketName
    }
    function trackScreenView(id, screen, uuid, app, version) {
        let w, h, uploadString;
        sendAnalyticsData("v=1&tid=" + id + "&cid=" + uuid + "&t=appview&an=" + app + "&av=" + version + "&av=" + version + "&cd=" + screen + "&sr=" + window.innerWidth + "x" + window.innerHeight)
    }
    function getAnalyticsUUID(instance) {
        if (!instance || !instance.apeMarketId && !instance.analytics)
            return guid();
        let uuidName = null;
        if (instance.apeMarketId ? uuidName = instance.apeMarketId + "_ah_uuid" : instance.analytics && (uuidName = instance.analytics + "_ah_uuid"),
        !uuidName)
            return guid();
        let uguid = localStorage.getItem(uuidName);
        return uguid || (uguid = guid(),
        localStorage.setItem(uuidName, uguid)),
        uguid
    }
    function trackEventItem(id, cat, act, lab, uuid, app, version) {
        let uploadString;
        sendAnalyticsData("v=1&tid=" + id + "&cid=" + uuid + "&t=event&an=" + app + "&aiid=com.ape.webapps&ec=" + cat + "&ea=" + act + "&el=" + lab)
    }
    function onGeneralError(e) {
        let scrpt = e.filename.substr(e.filename.lastIndexOf("/") + 1)
          , line = e.lineno
          , msg = e.message;
        for (let id in allInstances) {
            const instance = allInstances[id];
            logInstanceError(instance, scrpt, line, msg)
        }
    }
    function refreshAccountCredentials() {
        for (let id in allInstances) {
            const instance = allInstances[id];
            instance.loginCreds && instance.profileData && refreshInstanceCredentials(instance)
        }
    }
    function onFocus() {
        for (let id in allInstances) {
            const instance = allInstances[id];
            onInstanceFocus(instance)
        }
    }
    function onDrop(e) {
        if (!e || !e.dataTransfer)
            return;
        let negotiateFile = null;
        const {files: files} = e.dataTransfer;
        if (files && files.length > 0)
            for (const file of files)
                file && file.name && file.name.endsWith && (file.name.toLowerCase().endsWith(".amk") || file.name.toLowerCase().endsWith(".avk")) && (negotiateFile = file);
        if (!negotiateFile)
            return;
        e.preventDefault(),
        e.stopPropagation();
        const reader = new FileReader;
        reader.onload = function(e) {
            const data = e.target.result;
            if (data && data.trim().length > 0)
                for (let id in allInstances) {
                    const instance = allInstances[id];
                    negotiateApeMarketKey(instance, data)
                }
        }
        ,
        reader.readAsText(negotiateFile)
    }
    function onInstanceFocus(instance) {
        if (!instance.pendingSteamPurchase)
            return;
        const bal = parseInt(instance.profileData.bal)
          , creds = buildAccountsAPICreds(instance, "21");
        makeAccountsAPIRequest(creds, (function(balance) {
            if (balance) {
                const newCoinData = parseInt(balance);
                newCoinData != bal && (instance.profileData.bal = newCoinData,
                adl && adl.showToast({
                    message: "Thank you for your purchase."
                }),
                instance.pendingSteamPurchase = !1)
            }
        }
        ))
    }
    function onResize() {
        const data = {
            w: window.innerWidth,
            h: window.innerHeight
        };
        for (let id in allInstances) {
            const instance = allInstances[id];
            if (isInstanceApeChild(instance))
                return void postMsgToApeParent(instance, "winSize", data)
        }
    }
    function logInstanceError(instance, script, line, message) {
        if (!navigator.onLine)
            return;
        if (!instance || !instance.apeMarketId)
            return;
        let postBody = "a=" + instance.apeMarketId + "&p=" + instance.platform + "&v=" + instance.version + "&sp=" + instance.subplatform + "&sc=" + script + "&li=" + line + "&ms=" + encodeURI(message);
        try {
            let xmlhttp = new XMLHttpRequest;
            xmlhttp.open("POST", STAT_LOGGER_API_ERROR, !0),
            xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded"),
            xmlhttp.send(postBody)
        } catch (err) {}
    }
    function logInstanceStat(instance) {
        if (!navigator.onLine)
            return;
        if (!instance || !instance.apeMarketId)
            return;
        let tv = "0";
        instance.isTV && (tv = "1");
        let flagName = instance.apeMarketId + "_amsl_install_flag"
          , installFlag = localStorage.getItem(flagName);
        installFlag || (installFlag = "1");
        let postBody = "a=" + instance.apeMarketId + "&p=" + instance.platform + "&i=" + installFlag + "&v=" + instance.version + "&tv=" + tv + "&sp=" + instance.subplatform + "&ih=1";
        try {
            let xmlhttp = new XMLHttpRequest;
            xmlhttp.open("POST", STAT_LOGGER_API_STAT, !0),
            xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded"),
            xmlhttp.send(postBody)
        } catch (err) {}
        localStorage.setItem(flagName, "0")
    }
    function sendAnalyticsData(postBody) {
        if (navigator.onLine)
            try {
                let xmlhttp = new XMLHttpRequest;
                xmlhttp.open("POST", ANALYTICS_ENDPOINT, !0),
                xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded"),
                xmlhttp.send(postBody)
            } catch (err) {}
    }
    function guid() {
        function s4() {
            return Math.floor(65536 * (1 + Math.random())).toString(16).substring(1)
        }
        return s4() + s4() + "-" + s4() + "-" + s4() + "-" + s4() + "-" + s4() + s4() + s4()
    }
    function onUWPMessage(instance, e) {
        if (!e || !e.data)
            return;
        let message = e.data;
        if (message && message.type) {
            if ("hostCheckResponse" == message.type) {
                const data = message.data;
                data && "uwp" == data && (isUWPChild = !0,
                continueInstanceInit(instance)),
                data && "uwp.xbox" == data && (isUWPChild = !0,
                instance.isTV = !0,
                instance.subplatform = "tv",
                continueInstanceInit(instance)),
                data && "uwp.vr" == data && (isUWPChild = !0,
                instance.isVR = !0,
                instance.subplatform = "vr",
                continueInstanceInit(instance))
            }
            if ("skuCheckResponse" == message.type) {
                const data = message.data;
                if (data && data.sku) {
                    let status = "0";
                    data.has && (status = "1"),
                    setGlobalSKUStatus(data.sku, status)
                }
            }
            if ("purchaseResponse" == message.type) {
                const data = message.data;
                if (data && data.sku && data.has) {
                    let trackingId = data.trackingId;
                    performGlobalSKUPurchaseNotice(data.sku, trackingId)
                }
            }
            "fileImportResponse" == message.type && handleUWPFileImportResponse(message.data),
            "xboxLiveUserInfo" == message.type && handleUserXboxInfo(instance, message.data)
        }
    }
    function onInstanceHostMessage(instance, e, data) {
        data && data.from && data.from == wacUtilsParentWindowId && onHostedParentMessage(instance, data.message)
    }
    function onInstanceMessage(instance, e) {
        if (e && e.origin) {
            if ("https://apps.ape-apps.com" == e.origin) {
                let data = e.data;
                if (data.func && "onPremiumUpgradeComplete" == data.func) {
                    let success;
                    data.data && notifyPremiumUpgrade(instance, "1"),
                    iapWindow && iapWindow.close(),
                    iapWindow = null
                }
            }
            if ("https://accounts.ape-apps.com" == e.origin) {
                let data = e.data;
                if (data.func && "onCoinsPurchased" == data.func) {
                    let balance = parseInt(data.data);
                    instance.profileData && (instance.profileData.bal = balance),
                    coinBuyCallback && coinBuyCallback(balance),
                    coinBuyWindow && coinBuyWindow.close(),
                    coinBuyWindow = null,
                    coinBuyCallback = null,
                    adl && adl.showToast({
                        message: "Thank you for your purchase."
                    })
                }
            }
            if ("https://www.apewebapps.com" == e.origin) {
                let data = e.data;
                if (!data || !data.func)
                    return;
                if ("onApeAppsLogin" == data.func) {
                    if (instance.loginCreds = data.data,
                    window.PasswordCredential)
                        try {
                            let cred = new PasswordCredential({
                                id: atob(instance.loginCreds.r),
                                password: atob(instance.loginCreds.x),
                                name: "Ape Apps Account",
                                iconURL: "https://accounts.ape-apps.com/getavatar.php?u=" + atob(instance.loginCreds.r)
                            });
                            navigator.credentials.store(cred)
                        } catch (ex) {
                            console.log(ex)
                        }
                    delete instance.loginCreds.x,
                    delete instance.loginCreds.r,
                    adl.dismissDialogWindow(),
                    submitLoginData(instance)
                }
            }
            if ("https://ezoffice.org" == e.origin || "https://www.soundboardcity.com" == e.origin || "https://launcher.ape-apps.com" == e.origin || "https://vr.ape-apps.com" == e.origin || "https://console.ape-apps.com" == e.origin || "https://www.ape-apps.com" == e.origin || "https://www.my-colony.com" == e.origin) {
                let data = e.data;
                if (!(data && data.func && data.data && data.data.instance && data.data.instance == instance.uuid))
                    return;
                onHostedParentMessage(instance, data)
            }
        }
    }
    function onHostedParentMessage(instance, message) {
        const func = message.func
          , data = message.data;
        if ("xfercreddat" == func && doApeCredentialTransfer(instance, data),
        "launchInfoReturn" == func && (data.parentId && (instance.parentId = data.parentId),
        data.launchData && (instance.launchData = data.launchData,
        instance.onLaunchData && instance.onLaunchData(instance.launchData)),
        data.appScale && setAppScale(data.appScale)),
        "scaleChange" == func && data.scale && setAppScale(data.scale),
        instance && instance.hostedParentListeners)
            for (let i = 0; i < instance.hostedParentListeners.length; i++) {
                const listener = instance.hostedParentListeners[i];
                listener(func, data)
            }
    }
    function checkForGplayAutoLogin(instance, forInit) {
        const playId = window.Android.getPlayGamesId()
          , steamData = new FormData;
        steamData.append("f", "29"),
        steamData.append("gplay", playId),
        steamData.append("ak", instance.apeAccountKey),
        steamData.append("apikey", instance.apeAccountKey),
        steamData.append("returl", "api"),
        steamData.append("am", instance.apeMarketId),
        steamData.append("plat", instance.platform),
        makeAccountsAPIRequest(steamData, (function(result) {
            result && result.success ? (instance.loginCreds = {
                sida: result.sida,
                sidb: result.sidb,
                sidc: instance.apeAccountKey,
                app: instance.apeMarketId
            },
            submitLoginData(instance, forInit, !1, !1)) : attemptAutoLogin(instance, forInit)
        }
        ))
    }
    function checkForSteamAutoLogin(instance, forInit) {
        const steamData = new FormData;
        steamData.append("f", "26"),
        steamData.append("sid", steamCredentials.id),
        steamData.append("sun", steamCredentials.username),
        steamData.append("ak", instance.apeAccountKey),
        steamData.append("apikey", instance.apeAccountKey),
        steamData.append("returl", "api"),
        steamData.append("am", instance.apeMarketId),
        steamData.append("plat", instance.platform),
        makeAccountsAPIRequest(steamData, (function(result) {
            result && result.success ? (instance.loginCreds = {
                sida: result.sida,
                sidb: result.sidb,
                sidc: instance.apeAccountKey,
                app: instance.apeMarketId
            },
            submitLoginData(instance, forInit, !1, !1)) : attemptAutoLogin(instance, forInit)
        }
        ))
    }
    function initiateSignIn(instance, forInit) {
        if (instance.platform == PLATFORM_CODES.STEAM && steamCredentials)
            checkForSteamAutoLogin(instance, forInit);
        else {
            if (instance.platform == PLATFORM_CODES.GOOGLE_PLAY && window.Android && window.Android.getPlayGamesId) {
                const playId = window.Android.getPlayGamesId();
                if (playId && playId.trim().length > 1)
                    return void checkForGplayAutoLogin(instance, forInit)
            }
            attemptAutoLogin(instance, forInit)
        }
    }
    function attemptAutoLogin(instance, forInit) {
        if (forInit || (forInit = !1),
        isInstanceApeChild(instance))
            return void postMsgToApeParent(instance, "reqApeAppsCreds", {
                forInit: forInit
            });
        if (!instance.apeAccountKey || !instance.apeMarketId || !navigator.onLine)
            return void (forInit && instance.onInit());
        let retName = getRetCredName(instance)
          , baseLoginCreds = localStorage.getItem(retName);
        if (baseLoginCreds)
            try {
                let retLoginCreds = atob(baseLoginCreds);
                instance.loginCreds = JSON.parse(retLoginCreds)
            } catch (ex) {
                console.log(ex),
                instance.loginCreds = null
            }
        instance.loginCreds && instance.loginCreds.sida ? submitLoginData(instance, forInit, !0) : attemptCredentialSignin(instance, forInit)
    }
    function attemptCredentialSignin(instance, forInit) {
        try {
            window.PasswordCredential && navigator.credentials && navigator.credentials.get ? navigator.credentials.get({
                password: !0,
                mediation: "optional"
            }).then((function(res) {
                res && res.id && res.password ? attemptAPISignIn(instance, res.id, res.password, forInit, !1) : (instance.signOutOfApeApps(),
                forInit && instance.onInit())
            }
            )).catch((function() {
                instance.signOutOfApeApps(),
                forInit && instance.onInit()
            }
            )) : (instance.signOutOfApeApps(),
            forInit && instance.onInit())
        } catch (ex) {
            console.log(ex),
            instance.signOutOfApeApps(),
            forInit && instance.onInit()
        }
    }
    function doApeCredentialTransfer(instance, data) {
        let formData = new FormData;
        formData.append("f", "5"),
        formData.append("ak", data.sc),
        formData.append("am", data.am),
        formData.append("s1", data.sa),
        formData.append("s2", data.sb),
        formData.append("xa", instance.apeMarketId),
        formData.append("sl", 30);
        let forInit = !1;
        data.forInit && (forInit = data.forInit),
        makeAccountsAPIRequest(formData, (function(res) {
            res && res.app && res.sida ? (instance.loginCreds = {
                sida: res.sida,
                sidb: res.sidb,
                sidc: instance.apeAccountKey,
                app: instance.apeMarketId
            },
            submitLoginData(instance, forInit)) : (instance.signOutOfApeApps(),
            data.forInit && instance.onInit())
        }
        ))
    }
    function signOutOfApeApps() {
        let instance = this;
        this.profileData = null,
        this.loginCreds = null,
        navigator.credentials && navigator.credentials.preventSilentAccess && navigator.credentials.preventSilentAccess();
        let retName = getRetCredName(this);
        localStorage.removeItem(retName)
    }
    function buildAccountsAPICreds(instance, func) {
        if (!instance.loginCreds || !instance.profileData)
            return null;
        const params = new FormData;
        return func && params.append("f", func),
        params.append("s1", instance.loginCreds.sida),
        params.append("s2", instance.loginCreds.sidb),
        params.append("ak", instance.loginCreds.sidc),
        params.append("apikey", instance.apeAccountKey),
        params.append("am", instance.apeMarketId),
        params
    }
    function attemptAPISignIn(instance, username, password, forInit, fromSidebar) {
        forInit || (forInit = !1);
        let params = new FormData;
        params.append("f", 3),
        params.append("ak", instance.apeAccountKey),
        params.append("apikey", instance.apeAccountKey),
        params.append("returl", "api"),
        params.append("am", instance.apeMarketId),
        params.append("plat", instance.platform),
        params.append("r", btoa(username)),
        params.append("x", btoa(password)),
        makeAccountsAPIRequest(params, (function(res) {
            res && res.success ? (instance.loginCreds = {
                sida: res.sida,
                sidb: res.sidb,
                sidc: instance.apeAccountKey,
                app: instance.apeMarketId
            },
            submitLoginData(instance, forInit, !1, fromSidebar)) : (instance.signOutOfApeApps(),
            forInit && instance.onInit(),
            fromSidebar && showSidebarLoginError(instance))
        }
        ))
    }
    function showSidebarLoginError(instance) {
        adl.dismissDialogWindow(),
        adl.showDialog({
            title: "Login Error",
            message: "The username or password provided do not match our records.",
            buttons: [{
                text: "Try Again",
                func: function() {
                    instance.presentLogin()
                }
            }, {
                text: "Reset Password",
                func: function() {
                    window.open("https://accounts.ape-apps.com/startreset.php", "_blank")
                }
            }]
        })
    }
    function submitLoginData(instance, forInit, isRetainer, fromSidebar) {
        if (forInit || (forInit = !1),
        isRetainer || (isRetainer = !1),
        !instance || !instance.loginCreds || !instance.apeMarketId)
            return void (forInit && instance.onInit());
        const params = new FormData;
        params.append("f", 1),
        params.append("s1", instance.loginCreds.sida),
        params.append("s2", instance.loginCreds.sidb),
        params.append("ak", instance.loginCreds.sidc),
        params.append("am", instance.loginCreds.app),
        makeAccountsAPIRequest(params, (function(res) {
            if (res && 1 == res.length && res[0].un) {
                instance.profileData = res[0];
                const retLoginCreds = JSON.stringify(instance.loginCreds)
                  , baseLoginCreds = btoa(retLoginCreds)
                  , retName = getRetCredName(instance);
                localStorage.setItem(retName, baseLoginCreds),
                forInit ? (instance.onInit(),
                setTimeout((function() {
                    refreshInstanceCredentials(instance)
                }
                ), 6e4)) : instance.onLogin && instance.onLogin(),
                settleAccountPlatformPremium(instance),
                fromSidebar && adl.dismissDialogWindow(),
                finalActivationCheck(instance)
            } else
                instance.signOutOfApeApps(),
                isRetainer ? attemptCredentialSignin(instance, forInit) : (forInit && instance.onInit(),
                fromSidebar && showSidebarLoginError(instance))
        }
        ))
    }
    function finalActivationCheck(instance) {
        if (instance.platform == PLATFORM_CODES.STEAM && steamCredentials)
            if (steamCredentials.id && steamCredentials.id == instance.profileData.ste)
                notifyPremiumUpgrade(instance, "1");
            else if (instance.profileData.ste && instance.profileData.ste.trim().length > 4)
                showSteamAccountMismatchError(instance);
            else {
                const noaskFlagName = instance.apeMarketId + "-steam-noask"
                  , noaskFlag = localStorage.getItem(noaskFlagName);
                if (noaskFlag && "1" == noaskFlag)
                    return;
                showLinkSteamDialog(instance)
            }
        if (instance.platform == PLATFORM_CODES.GOOGLE_PLAY && window.Android && window.Android.getPlayGamesId) {
            const playId = window.Android.getPlayGamesId();
            if (playId && playId.trim().length > 1)
                instance.profileData.gplay && instance.profileData.gplay.trim().length > 1 && instance.profileData.gplay.trim() != playId.trim() && showPlayGamesAccountMismatchError(instance);
            else {
                const noaskFlagName = instance.apeMarketId + "-playgames-noask"
                  , noaskFlag = localStorage.getItem(noaskFlagName);
                if (noaskFlag && "1" == noaskFlag)
                    return;
                showLinkPlayGamesDialog(instance)
            }
        }
    }
    function showLinkPlayGamesDialog(instance) {
        if (!window.adl)
            return;
        const playId = window.Android.getPlayGamesId();
        if (!playId)
            return;
        const noaskFlagName = instance.apeMarketId + "-playgames-noask";
        adl.showDialog({
            title: "Link Google Play Account",
            message: "Would you like to link your Google Play Games Services account to your Ape Apps account?  Linking your account will allow automatic login for your Ape Apps games on Android, and will allow you to sync your premium Google Play content to your account so that it can be accessed on your other devices.",
            icon: "https://www.apewebapps.com/images/gplay-games.png",
            buttons: [{
                text: "Remind me later"
            }, {
                text: "No",
                color: "#F44336",
                func: function() {
                    localStorage.setItem(noaskFlagName, "1")
                }
            }, {
                text: "Link Accounts",
                color: "#4CAF50",
                func: function() {
                    const linkData = buildAccountsAPICreds(instance, "28");
                    linkData ? (linkData.append("gplay", playId),
                    fetch(APE_ACCOUNTS_API, {
                        method: "post",
                        body: linkData
                    }).then((async function(response) {
                        const res = await response.text();
                        res && "success" == res.toLowerCase().trim() ? (instance.profileData.gplay = playId,
                        adl.showDialog({
                            title: "Play Account Linked",
                            message: "Congratulations!  Your Google Play account has been successfully linked to your Ape Apps Account (" + instance.profileData.un + ").  You are now able to access your premium content on any device that you sign in to your Ape Apps account with.",
                            icon: "https://www.apewebapps.com/images/gplay-games.png"
                        })) : adl.showDialog({
                            title: "Play Account Link Error",
                            message: "This Google Play account is already associated with another Ape Apps account.  If you would like to change the account link, please sign in to the Ape Apps account portal with your existing account and unlink it from Google Play.",
                            buttons: [{
                                text: "Dismiss"
                            }, {
                                text: "Go To Account Portal",
                                func: function() {
                                    window.open("https://accounts.ape-apps.com", "_blank")
                                }
                            }],
                            icon: "https://www.apewebapps.com/images/gplay-games.png"
                        })
                    }
                    ))) : adl.showToast({
                        message: "Account link failed!"
                    })
                }
            }]
        })
    }
    function showPlayGamesAccountMismatchError(instance) {
        window.adl ? adl.showDialog({
            title: "Play Games Account Mismatch",
            message: "This Ape Apps account is already associated with another Google Play account, and both cannot be signed in at the same time.  To change your linked account, please visit the Ape Apps account portal and unlink the original account and then try again.",
            icon: "https://www.apewebapps.com/images/gplay-games.png",
            buttons: [{
                text: "Sign Out",
                func: function() {
                    instance.signOutOfApeApps()
                }
            }, {
                text: "Go To Account Portal",
                func: function() {
                    window.open("https://accounts.ape-apps.com", "_blank")
                }
            }]
        }) : instance.signOutOfApeApps()
    }
    function showSteamAccountMismatchError(instance) {
        window.adl ? adl.showDialog({
            title: "Steam Account Mismatch",
            message: "This Ape Apps account is already associated with another Steam account, and both cannot be signed in at the same time.  To change your linked account, please visit the Ape Apps account portal and unlink the original account and then try again.",
            icon: "https://www.apewebapps.com/images/steam.png",
            buttons: [{
                text: "Sign Out",
                func: function() {
                    instance.signOutOfApeApps()
                }
            }, {
                text: "Go To Account Portal",
                func: function() {
                    window.open("https://accounts.ape-apps.com", "_blank")
                }
            }]
        }) : instance.signOutOfApeApps()
    }
    function showLinkSteamDialog(instance) {
        if (!window.adl)
            return;
        const noaskFlagName = instance.apeMarketId + "-steam-noask";
        adl.showDialog({
            title: "Link Steam Account",
            message: "Would you like to link your Steam account to your Ape Apps account?  Linking your account will allow automatic login for your Ape Apps games on Steam, and will allow you to sync your premium Steam content to your account so that it can be accessed on your other devices.",
            icon: "https://www.apewebapps.com/images/steam.png",
            buttons: [{
                text: "Remind me later"
            }, {
                text: "No",
                color: "#F44336",
                func: function() {
                    localStorage.setItem(noaskFlagName, "1")
                }
            }, {
                text: "Link Accounts",
                color: "#4CAF50",
                func: function() {
                    const linkData = buildAccountsAPICreds(instance, "25");
                    linkData ? (linkData.append("ste", steamCredentials.id),
                    linkData.append("sun", steamCredentials.username),
                    fetch(APE_ACCOUNTS_API, {
                        method: "post",
                        body: linkData
                    }).then((async function(response) {
                        const res = await response.text();
                        res && "success" == res.toLowerCase().trim() ? (instance.profileData.ste = steamCredentials.id,
                        adl.showDialog({
                            title: "Steam Account Linked",
                            message: "Congratulations!  Your Steam account (" + steamCredentials.username + ") has been successfully linked to your Ape Apps Account (" + instance.profileData.un + ").  You are now able to access your premium content on any device that you sign in to your Ape Apps account with.",
                            icon: "https://www.apewebapps.com/images/steam.png"
                        })) : adl.showDialog({
                            title: "Steam Account Link Error",
                            message: "This Steam account is already associated with another Ape Apps account.  If you would like to change the account link, please sign in to the Ape Apps account portal with your existing account and unlink it from Steam.",
                            buttons: [{
                                text: "Dismiss"
                            }, {
                                text: "Go To Account Portal",
                                func: function() {
                                    window.open("https://accounts.ape-apps.com", "_blank")
                                }
                            }],
                            icon: "https://www.apewebapps.com/images/steam.png"
                        })
                    }
                    ))) : adl.showToast({
                        message: "Account link failed!"
                    })
                }
            }]
        })
    }
    function refreshInstanceCredentials(instance) {
        if (!instance || !instance.loginCreds || !instance.profileData)
            return;
        const creds = buildAccountsAPICreds(instance, "27");
        makeAccountsAPIRequest(creds, (function(credData) {
            if (credData && credData.sida) {
                instance.loginCreds = credData;
                const baseLoginCreds = btoa(JSON.stringify(credData))
                  , retName = getRetCredName(instance);
                localStorage.setItem(retName, baseLoginCreds)
            }
        }
        ))
    }
    function makeAccountsAPIRequest(data, callback) {
        if (!callback)
            return;
        const xmlhttp = new XMLHttpRequest;
        xmlhttp.open("post", APE_ACCOUNTS_API, !0),
        xmlhttp.addEventListener("load", (function(e) {
            const resData = e.target.responseText;
            try {
                const res = JSON.parse(resData);
                callback(res)
            } catch (ex) {
                callback(resData)
            }
        }
        )),
        xmlhttp.send(data)
    }
    function presentLogin(position) {
        const instance = this;
        if (window.adl) {
            position || (position = "left",
            window.innerWidth > 500 && (position = "right"));
            const loginBox = document.createElement("div")
              , logInIntro = document.createElement("div");
            logInIntro.innerHTML = "Sign in to " + instance.appName + " with your Ape Apps Account.",
            logInIntro.style.marginBottom = "24px",
            loginBox.appendChild(logInIntro);
            const logInUsername = document.createElement("input");
            logInUsername.type = "text",
            logInUsername.className = "adl adlGamepadSelectable",
            logInUsername.placeholder = "username",
            logInUsername.autocapitalize = "off",
            logInUsername.style.marginBottom = "8px",
            logInUsername.onclick = function() {
                window.blur(),
                setTimeout((function() {
                    window.focus(),
                    logInUsername.focus()
                }
                ), 50)
            }
            ,
            loginBox.appendChild(logInUsername);
            const logInPassword = document.createElement("input");
            logInPassword.type = "password",
            logInPassword.className = "adl adlGamepadSelectable",
            logInPassword.placeholder = "password",
            logInPassword.style.marginBottom = "12px",
            logInPassword.onclick = function() {
                window.blur(),
                setTimeout((function() {
                    window.focus(),
                    logInPassword.focus()
                }
                ), 50)
            }
            ,
            loginBox.appendChild(logInPassword);
            const logInSubmit = document.createElement("button");
            logInSubmit.className = "adl adlGamepadSelectable",
            logInSubmit.innerHTML = "Sign In",
            logInSubmit.style.display = "block",
            logInSubmit.style.margin = "0px 0px 0px auto",
            logInSubmit.onclick = function() {
                const username = logInUsername.value.trim()
                  , password = logInPassword.value.trim();
                !username || !password || username.length < 1 || password.length < 1 ? adl.showDialog({
                    title: "Login Error",
                    message: "Please enter a valid username and password."
                }) : attemptAPISignIn(instance, username, password, !1, !0)
            }
            ,
            loginBox.appendChild(logInSubmit),
            logInPassword.onkeydown = function(e) {
                e.keyCode && 13 == e.keyCode && logInSubmit && logInSubmit.click()
            }
            ,
            adl.showDialog({
                customElement: loginBox,
                buttons: [{
                    text: "Cancel"
                }, {
                    text: "New Account",
                    func: function() {
                        window.open("https://accounts.ape-apps.com/register.php")
                    }
                }],
                flyout: {
                    position: position
                },
                title: "Sign In"
            })
        } else {
            let tvFlag = "0";
            instance.isTV && (tvFlag = "1");
            let useForground = "000000";
            document.body.classList.contains("adlDark") && (useForground = "dddddd");
            let loginURL = "https://www.apewebapps.com/login2.php?app=" + instance.apeMarketId + "&fg=" + useForground + "&tv=" + tvFlag + "&plat=" + instance.platform;
            window.open(loginURL, "loginWindow")
        }
    }
    function getRetCredName(instance) {
        let retName = "";
        return instance.apeMarketId && (retName += "am" + instance.apeMarketId),
        instance.apeAccountKey && (retName += ".ak" + instance.apeAccountKey),
        retName += ".retcr",
        retName
    }
    function isUserPremium() {
        let instance = this
          , retPre = localStorage.getItem("app-ret-pre-" + instance.apeMarketId);
        return !(!retPre || "1" != retPre) || (instance.platform == PLATFORM_CODES.STEAM || (!(instance.platform != PLATFORM_CODES.WINDOWS || !instance.wspo) || (!!checkAndRet(instance) || (!!(window.webkit && window.webkit.messageHandlers && window.webkit.messageHandlers.getHostPremium && iosPremiumStatus && "1" == iosPremiumStatus.trim()) || (!(!window.Android || !window.Android.getHostPremium || window.Android.checkSKU || !Android.getHostPremium()) || !(!instance.loginCreds || !instance.profileData) && !(!instance.loginCreds || !instance.profileData || "1" != instance.profileData.pre))))))
    }
    function showLoggedUserSidebar() {
        if (!adl)
            return;
        const instance = this;
        if (!instance.loginCreds || !instance.profileData)
            return;
        let useTheme = "#1E88E5";
        adl.getTheme && (useTheme = adl.getTheme());
        const premium = instance.isUserPremium()
          , userOptions = [];
        if (isInstanceApeChild(instance) || userOptions.push({
            title: "Sign Out",
            description: "You are currently signed in to " + instance.appName + " as " + instance.profileData.un,
            icon: "https://accounts.ape-apps.com/getavatar.php?u=" + instance.profileData.un,
            circleIcon: !0,
            tag: "signout"
        }),
        instance.platform == PLATFORM_CODES.STEAM && steamCredentials && (steamCredentials.id && steamCredentials.id == instance.profileData.ste ? userOptions.push({
            title: "Steam Account",
            icon: "https://www.apewebapps.com/images/steam.png",
            description: "Your Ape Apps account is currently linked to your Steam Account (" + steamCredentials.username + ").  You can change your linking options at the Ape Apps Account portal.",
            tag: "account",
            status: "Linked",
            statusColor: "#4CAF50"
        }) : userOptions.push({
            title: "Link Steam Account",
            icon: "https://www.apewebapps.com/images/steam.png",
            description: "Link your Steam account to your Ape Apps account to sync premium content.",
            tag: "dolinksteam",
            status: "Not Linked",
            statusColor: "#F44336"
        })),
        instance.platform == PLATFORM_CODES.GOOGLE_PLAY && window.Android && window.Android.getPlayGamesId) {
            const playId = window.Android.getPlayGamesId();
            playId && playId.trim().length > 1 && (playId == instance.profileData.gplay ? userOptions.push({
                title: "Google Play Account",
                icon: "https://www.apewebapps.com/images/gplay-games.png",
                description: "Your Ape Apps account is currently linked to your Google Play account for " + instance.appName + ".  You can change your linking options at the Ape Apps Account portal.",
                tag: "account",
                status: "Linked",
                statusColor: "#4CAF50"
            }) : userOptions.push({
                title: "Link Google Play Account",
                icon: "https://www.apewebapps.com/images/gplay-games.png",
                description: "Link your Google Play account to your Ape Apps account for " + instance.appName + " to sync premium content.",
                tag: "dolinkgplay",
                status: "Not Linked",
                statusColor: "#F44336"
            }))
        }
        premium ? userOptions.push({
            title: "Premium Upgrade",
            description: "You are using the premium version of " + instance.appName + "!  Thank you for your support!",
            icon: "fluent.&#xE14D;",
            iconColor: "#4CAF50",
            tag: "premium"
        }) : instance.isPremiumAvailable() && userOptions.push({
            title: "Premium Upgrade",
            description: "You are currently using the free, ad-supported version of " + instance.appName + ".  Upgrade to the full version to unlock all content, support development and remove advertising!",
            icon: "fluent.&#xE14D;",
            iconColor: "#F44336",
            tag: "premium"
        });
        let showCoins = !0;
        instance.platform == PLATFORM_CODES.WINDOWS && instance.isGame && !isUWPChild && (showCoins = !1),
        showCoins && userOptions.push({
            title: "Ape Coins",
            description: "Ape Coins can be used in some Ape Apps games and applications to unlock additional content, transact with other players, or to purchae premium upgrades.",
            icon: "https://www.apewebapps.com/images/ape-coin.png",
            status: "Balance: " + numberWithCommas(instance.profileData.bal),
            statusColor: "#FFA000",
            tag: "apecoins"
        }),
        userOptions.push({
            title: "Manage Account",
            description: "Manage all of your Ape Apps account settings.  You will be sent to the account management portal website.",
            icon: "fluent.&#xE13D;",
            iconColor: "#8D6E63",
            status: "https://accounts.ape-apps.com",
            statusColor: useTheme,
            tag: "account"
        }),
        userOptions.push({
            title: "Delete Account",
            description: "Go to the account management portal where you can delete your Ape Apps Account.",
            icon: "fluent.&#xE1E0;",
            iconColor: "#F44336",
            tag: "delact",
            status: "https://accounts.ape-apps.com/unregister.php",
            statusColor: "#F44336"
        }),
        adl.showList({
            title: instance.profileData.un,
            options: userOptions,
            onSelection: function(tag) {
                tag && ("dolinkgplay" == tag && showLinkPlayGamesDialog(instance),
                "dolinksteam" == tag && showLinkSteamDialog(instance),
                "delact" == tag && showDelActDialog(instance),
                "premium" == tag && instance.goPremium(),
                "apecoins" == tag && instance.showApeCoinFlow(),
                "signout" == tag && (instance.signOutOfApeApps(),
                instance.onLogin && instance.onLogin()),
                "account" == tag && window.open("https://accounts.ape-apps.com", "_blank"))
            },
            flyout: {
                position: "right"
            }
        })
    }
    function goPremium() {
        let instance = this, premium;
        if (instance.isUserPremium())
            return void (adl && adl.showToast({
                message: "Thank you for your support!",
                icon: "fluent.&#xE14D;",
                iconColor: "#4CAF50"
            }));
        if (purchWasPending = !0,
        window.webkit && window.webkit.messageHandlers)
            return void (instance.iosPrmSku && window.webkit.messageHandlers.purchaseSKU ? webkit.messageHandlers.purchaseSKU.postMessage(instance.iosPrmSku) : window.webkit.messageHandlers.goPremium && webkit.messageHandlers.goPremium.postMessage("placeholder"));
        if (instance.price <= 0 || !adl)
            return;
        let upgradeOptions = [];
        if (instance.loginCreds && instance.profileData) {
            let coinCost = Math.round(100 * instance.price)
              , balColor = "#43A047"
              , bal = instance.profileData.bal;
            coinCost > bal && (balColor = "#F44336"),
            upgradeOptions.push({
                title: "Ape Coins",
                description: "Upgrade " + instance.appName + " for " + numberWithCommas(coinCost) + " Ape Coins using your available Ape Coin balance.",
                tag: "apecoinpayment",
                icon: "https://www.apewebapps.com/images/ape-coin.png",
                status: "Balance: " + numberWithCommas(bal),
                statusColor: balColor
            }),
            (instance.platform == PLATFORM_CODES.APE_MARKET || instance.platform == PLATFORM_CODES.APE_WEB_APPS || isInstanceApeChild(instance)) && (upgradeOptions.push({
                title: "Credit Card",
                description: "Upgrade " + instance.appName + " using your credit or debit card.  Transactions are handled securely by Stripe and your information is NOT stored by Ape Apps.  Your purchase will be added to your Ape Apps Account and will work across all devices you sign in to.",
                tag: "stripe",
                icon: "https://www.apewebapps.com/images/creditcard-flat.png"
            }),
            upgradeOptions.push({
                title: "PayPal",
                description: "Upgrade " + instance.appName + " using PayPal, the fast and secure way to pay money online.  Your purchase will be added to your Ape Apps Account and will work across all devices you sign in to.",
                tag: "paypal",
                icon: "https://www.apewebapps.com/images/paypal.png"
            }))
        }
        let appStoreLicenseKy = !1;
        window.Android && (window.Android.goPremium || window.Android.purchaseSKU) && (appStoreLicenseKy = !0,
        instance.platform == PLATFORM_CODES.GOOGLE_PLAY && window.Android && instance.gpPrmSku && upgradeOptions.push({
            title: "Google Play Purchase",
            description: "Purchase the full version of " + instance.appName + " with your Google Play account.",
            tag: "googleplay",
            icon: "https://www.apewebapps.com/images/gplay.png"
        }),
        instance.platform == PLATFORM_CODES.AMAZON && window.Android && instance.amzPrmSku && upgradeOptions.push({
            title: "Amazon Purchase",
            description: "Purchase the full version of " + instance.appName + " with your Amazon account.",
            tag: "amazon",
            icon: "https://www.apewebapps.com/images/amazon.png"
        })),
        isUWPChild && instance.winPrmSku && (appStoreLicenseKy = !0,
        upgradeOptions.push({
            title: "Windows Store Purchase",
            description: "Purchase the full version of " + instance.appName + " through the Windows Store.",
            tag: "windowsstore",
            icon: "https://www.apewebapps.com/images/platform_windows.png"
        }));
        let licenseText = "Activate or purchase an authentic Ape Market License Key file for " + instance.appName + ".";
        appStoreLicenseKy && (licenseText = "Activate " + instance.appName + " using an Ape Apps License Key (*.amk) or Ape Apps Volume License (*.avk) that you already own."),
        upgradeOptions.push({
            title: "License Key Activation",
            description: licenseText,
            tag: "license",
            icon: "https://www.apewebapps.com/images/am.png"
        }),
        instance.platform != PLATFORM_CODES.APE_MARKET && instance.platform != PLATFORM_CODES.APE_LAUNCHER && instance.platform != PLATFORM_CODES.SOUNDBOARD_CITY && instance.platform != PLATFORM_CODES.APE_WEB_APPS || upgradeOptions.push({
            title: "Mail Order",
            description: "Upgrade " + instance.appName + " the old fashioned way by printing the order form and sending cash.  U.S. currency only.  Please allow one business week for your product to activate.",
            tag: "cash",
            icon: "https://www.apewebapps.com/images/paycash.png"
        }),
        1 != upgradeOptions.length ? adl.showList({
            title: "Premium Upgrade $" + numberWithCommas(instance.price),
            options: upgradeOptions,
            flyout: {
                position: "right"
            },
            onSelection: function(tag) {
                tag && onPremiumOptionSelection(tag, instance, appStoreLicenseKy)
            }
        }) : onPremiumOptionSelection(upgradeOptions[0].tag, instance, appStoreLicenseKy)
    }
    function onPremiumOptionSelection(tag, instance, appStoreLicenseKy) {
        if (tag) {
            if ("windowsstore" == tag && isUWPChild && instance.winPrmSku && window.chrome.webview.postMessage({
                type: "purchaseSKU",
                data: instance.winPrmSku
            }),
            "googleplay" != tag && "amazon" != tag || window.Android && (window.Android.purchaseSKU ? "googleplay" == tag ? Android.purchaseSKU(instance.gpPrmSku, !1) : Android.purchaseSKU(instance.amzPrmSku, !1) : window.Android.goPremium && Android.goPremium()),
            "cash" == tag) {
                let orderFormURL = "https://apps.ape-apps.com/orderform.php?id=" + instance.apeMarketId;
                instance.loginCreds && instance.profileData && (orderFormURL += "&user=" + instance.profileData.un),
                window.open(orderFormURL, "cashform", "height=560,width=640,status=no,titlebar=no,modal=yes,resizable=yes,menubar=no,frame=true")
            }
            if ("paypal" == tag && instance.loginCreds && instance.profileData) {
                let iapURL2 = "https://apps.ape-apps.com/purchaseact.php?id=" + instance.apeMarketId + "&a=" + instance.loginCreds.sida + "&b=" + instance.loginCreds.sidb + "&c=" + instance.loginCreds.sidc;
                iapWindow = window.open(iapURL2, "purchase", "height=620,width=500,status=no,titlebar=no,modal=yes,resizable=yes,menubar=no,frame=true")
            }
            if ("stripe" == tag && instance.loginCreds && instance.profileData) {
                let iapURL2 = "https://apps.ape-apps.com/awastripepurchase.php?id=" + instance.apeMarketId + "&a=" + instance.loginCreds.sida + "&b=" + instance.loginCreds.sidb + "&c=" + instance.loginCreds.sidc;
                iapWindow = window.open(iapURL2, "purchasestripe", "height=740,width=1020,status=no,titlebar=no,modal=yes,resizable=yes,menubar=no,frame=true")
            }
            if ("apecoinpayment" == tag && adl && instance.loginCreds && instance.profileData) {
                let bal = instance.profileData.bal
                  , coinCost = Math.round(100 * parseFloat(instance.price));
                if (coinCost > bal)
                    return void adl.showDialog({
                        title: "Insufficient Ape Coins",
                        message: "Upgrading " + instance.appName + " requires " + numberWithCommas(coinCost) + " Ape Coins, but your account balance is " + numberWithCommas(bal) + ".  Either add more Ape Coins to your account, or select a different purchase option.",
                        icon: "https://www.apewebapps.com/images/ape-coin.png",
                        buttons: [{
                            text: "Purchase Ape Coins",
                            func: function() {
                                instance.showApeCoinFlow()
                            }
                        }, {
                            text: "Dismiss"
                        }]
                    });
                adl.showDialog({
                    title: "Premium Upgrade",
                    message: "You are about to upgrade " + instance.appName + " for " + numberWithCommas(coinCost) + " Ape Coins.",
                    icon: "https://www.apewebapps.com/images/ape-coin.png",
                    buttons: [{
                        text: "Confirm",
                        func: function() {
                            let upgradeData = buildAccountsAPICreds(instance, "17");
                            upgradeData && makeAccountsAPIRequest(upgradeData, (function(resDat) {
                                resDat && resDat.success ? (null != resDat.balance && (instance.profileData.bal = parseInt(resDat.balance)),
                                notifyPremiumUpgrade(instance, "1"),
                                adl && adl.showToast({
                                    message: "Thank you for your purchase."
                                })) : adl.showDialog({
                                    title: "Purchase Failed!",
                                    message: "Your Ape Coin purchase failed with error: " + resDat.reason,
                                    icon: "https://www.apewebapps.com/images/ape-coin.png"
                                })
                            }
                            ))
                        },
                        color: "#4CAF50"
                    }, {
                        text: "Cancel",
                        color: "#F44336"
                    }]
                })
            }
            "license" == tag && (adl && !appStoreLicenseKy ? adl.showDialog({
                title: "License Key Activation",
                message: "Upgrading " + instance.appName + " requires an authentic license key file from Ape Apps.  Do you already have a " + instance.appName + " License Key (.amk file)?",
                icon: "https://www.apewebapps.com/images/am.png",
                buttons: [{
                    text: "Yes",
                    func: function() {
                        browseForLicenseKey(instance)
                    }
                }, {
                    text: "No",
                    func: function() {
                        initNonActPurchase(instance)
                    }
                }]
            }) : browseForLicenseKey(instance))
        }
    }
    function browseForLicenseKey(instance) {
        if (isUWPChild)
            return void doUWPFileImport("amk,avk", (function(fileData) {
                negotiateApeMarketKey(instance, fileData.content)
            }
            ));
        const input = document.createElement("input");
        input.type = "file",
        input.style.display = "none",
        input.setAttribute("accept", ".amk, .avk"),
        document.body.appendChild(input),
        input.onchange = function(e) {
            const file = e.target.files[0]
              , reader = new FileReader;
            reader.onload = function(ew) {
                document.body.removeChild(input);
                const raw = ew.target.result;
                negotiateApeMarketKey(instance, raw)
            }
            ,
            reader.readAsText(file)
        }
        ,
        input.click()
    }
    function initNonActPurchase(instance) {
        let urlName, goURL = "https://apps.ape-apps.com/" + replaceAll(instance.appName, " ", "-").toLowerCase() + "/purchase.html";
        window.open(goURL, "_blank")
    }
    function replaceAll(str, find, replace) {
        return str.replace(new RegExp(find,"g"), replace)
    }
    function numberWithCommas(x) {
        let formattedNumber;
        return x || (x = 0),
        (x = parseFloat(x)).toFixed(2).replace(/[.,]00$/, "").replace(/\B(?=(\d{3})+(?!\d))/g, ",")
    }
    function parseOutAppInfo(instance, ob) {
        instance.apeAccountKey = ob.apikey,
        instance.appName = ob.app_name,
        instance.analytics = ob.google_analytics_id,
        instance.price = parseFloat(ob.price),
        instance.gameId = parseInt(ob.awa_highscoresid),
        instance.srvAndRelCd = parseInt(ob["android-rel-cde"]),
        ob.appIsGame && 1 == parseInt(ob.appIsGame) && (instance.isGame = !0);
        const urlName = replaceAll(instance.appName, " ", "-").toLowerCase();
        instance.rateLinks[PLATFORM_CODES.APE_MARKET] = "https://market.ape-apps.com/" + urlName + ".html",
        ob.androidmarket && ob.androidmarket.trim().length > 5 && (instance.rateLinks[PLATFORM_CODES.GOOGLE_PLAY] = "https://play.google.com/store/apps/details?id=" + ob.androidmarket.trim()),
        ob.amazon_market && ob.amazon_market.trim().length > 5 && (instance.rateLinks[PLATFORM_CODES.AMAZON] = "amzn://apps/android?p=" + ob.amazon_market.trim()),
        ob.iPhoneURL && ob.iPhoneURL.trim().length > 5 && (instance.rateLinks[PLATFORM_CODES.APPLE] = "itms-apps://itunes.apple.com/us/app/" + ob.iPhoneURL.trim() + "&action=write-review"),
        ob.win_store_id && ob.win_store_id.trim().length > 5 && (instance.rateLinks[PLATFORM_CODES.WINDOWS] = "ms-windows-store://review/?ProductId=" + ob.win_store_id.trim()),
        ob.steamAppId && ob.steamAppId.trim().length > 5 && (instance.steamAppId = ob.steamAppId,
        instance.rateLinks[PLATFORM_CODES.STEAM] = "steam://store/" + ob.steamAppId.trim());
        let rd, ry = new Date(ob.release_date).getFullYear();
        isNaN(ry) || (instance.updateYear = parseInt(ry)),
        ob.uwp_paid_only && 1 == parseInt(ob.uwp_paid_only) && (instance.wspo = !0),
        ("n/a" == instance.analytics || instance.analytics.trim().length < 4) && (instance.analytics = null),
        ob.gplay_premium_sku && ob.gplay_premium_sku.trim().length > 2 && (instance.gpPrmSku = ob.gplay_premium_sku.trim()),
        ob.amazon_premium_sku && ob.amazon_premium_sku.trim().length > 2 && (instance.amzPrmSku = ob.amazon_premium_sku.trim()),
        ob.ios_premium_sku && ob.ios_premium_sku.trim().length > 2 && (instance.iosPrmSku = ob.ios_premium_sku.trim()),
        ob["win-premium-sku"] && "n/a" != ob["win-premium-sku"] && ob["win-premium-sku"].trim().length > 2 && (instance.winPrmSku = ob["win-premium-sku"].trim()),
        ob.apeCoinSkuGplay100 && ob.apeCoinSkuGplay100.trim().length > 2 && instance.apeCoinSKUs.gplay.push({
            sku: ob.apeCoinSkuGplay100.trim(),
            val: 100
        }),
        ob.apeCoinSkuGplay500 && ob.apeCoinSkuGplay500.trim().length > 2 && instance.apeCoinSKUs.gplay.push({
            sku: ob.apeCoinSkuGplay500.trim(),
            val: 500
        }),
        ob.apeCoinSkuGplay1000 && ob.apeCoinSkuGplay1000.trim().length > 2 && instance.apeCoinSKUs.gplay.push({
            sku: ob.apeCoinSkuGplay1000.trim(),
            val: 1e3
        }),
        ob.apeCoinSkuGplay2000 && ob.apeCoinSkuGplay2000.trim().length > 2 && instance.apeCoinSKUs.gplay.push({
            sku: ob.apeCoinSkuGplay2000.trim(),
            val: 2e3
        }),
        ob.apeCoinSkuGplay5000 && ob.apeCoinSkuGplay5000.trim().length > 2 && instance.apeCoinSKUs.gplay.push({
            sku: ob.apeCoinSkuGplay5000.trim(),
            val: 5e3
        }),
        ob.apeCoinSkuAmazon100 && ob.apeCoinSkuAmazon100.trim().length > 2 && instance.apeCoinSKUs.amazon.push({
            sku: ob.apeCoinSkuAmazon100.trim(),
            val: 100
        }),
        ob.apeCoinSkuAmazon500 && ob.apeCoinSkuAmazon500.trim().length > 2 && instance.apeCoinSKUs.amazon.push({
            sku: ob.apeCoinSkuAmazon500.trim(),
            val: 500
        }),
        ob.apeCoinSkuAmazon1000 && ob.apeCoinSkuAmazon1000.trim().length > 2 && instance.apeCoinSKUs.amazon.push({
            sku: ob.apeCoinSkuAmazon1000.trim(),
            val: 1e3
        }),
        ob.apeCoinSkuAmazon2000 && ob.apeCoinSkuAmazon2000.trim().length > 2 && instance.apeCoinSKUs.amazon.push({
            sku: ob.apeCoinSkuAmazon2000.trim(),
            val: 2e3
        }),
        ob.apeCoinSkuAmazon5000 && ob.apeCoinSkuAmazon5000.trim().length > 2 && instance.apeCoinSKUs.amazon.push({
            sku: ob.apeCoinSkuAmazon5000.trim(),
            val: 5e3
        }),
        ob.apeCoinSkuiOS100 && ob.apeCoinSkuiOS100.trim().length > 2 && instance.apeCoinSKUs.ios.push({
            sku: ob.apeCoinSkuiOS100.trim(),
            val: 100
        }),
        ob.apeCoinSkuiOS500 && ob.apeCoinSkuiOS500.trim().length > 2 && instance.apeCoinSKUs.ios.push({
            sku: ob.apeCoinSkuiOS500.trim(),
            val: 500
        }),
        ob.apeCoinSkuiOS1000 && ob.apeCoinSkuiOS1000.trim().length > 2 && instance.apeCoinSKUs.ios.push({
            sku: ob.apeCoinSkuiOS1000.trim(),
            val: 1e3
        }),
        ob.apeCoinSkuiOS2000 && ob.apeCoinSkuiOS2000.trim().length > 2 && instance.apeCoinSKUs.ios.push({
            sku: ob.apeCoinSkuiOS2000.trim(),
            val: 2e3
        }),
        ob.apeCoinSkuiOS5000 && ob.apeCoinSkuiOS5000.trim().length > 2 && instance.apeCoinSKUs.ios.push({
            sku: ob.apeCoinSkuiOS5000.trim(),
            val: 5e3
        }),
        ob.apeCoinSkuWin100 && ob.apeCoinSkuWin100.trim().length > 2 && instance.apeCoinSKUs.winstore.push({
            sku: ob.apeCoinSkuWin100.trim(),
            val: 100
        }),
        ob.apeCoinSkuWin500 && ob.apeCoinSkuWin500.trim().length > 2 && instance.apeCoinSKUs.winstore.push({
            sku: ob.apeCoinSkuWin500.trim(),
            val: 500
        }),
        ob.apeCoinSkuWin1000 && ob.apeCoinSkuWin1000.trim().length > 2 && instance.apeCoinSKUs.winstore.push({
            sku: ob.apeCoinSkuWin1000.trim(),
            val: 1e3
        }),
        ob.apeCoinSkuWin2000 && ob.apeCoinSkuWin2000.trim().length > 2 && instance.apeCoinSKUs.winstore.push({
            sku: ob.apeCoinSkuWin2000.trim(),
            val: 2e3
        }),
        ob.apeCoinSkuWin5000 && ob.apeCoinSkuWin5000.trim().length > 2 && instance.apeCoinSKUs.winstore.push({
            sku: ob.apeCoinSkuWin5000.trim(),
            val: 5e3
        }),
        ob.adsterra728 && ob.adsterra728.trim().length > 4 && (instance.adsterraUnits || (instance.adsterraUnits = {}),
        instance.adsterraUnits.banner728 = ob.adsterra728.trim()),
        ob.adsterra468 && ob.adsterra468.trim().length > 4 && (instance.adsterraUnits || (instance.adsterraUnits = {}),
        instance.adsterraUnits.banner468 = ob.adsterra468.trim()),
        ob.adsterra320 && ob.adsterra320.trim().length > 4 && (instance.adsterraUnits || (instance.adsterraUnits = {}),
        instance.adsterraUnits.banner320 = ob.adsterra320.trim()),
        ob.montaginterstitial && ob.montaginterstitial.trim().length > 4 && (instance.montaginterstitial = ob.montaginterstitial.trim())
    }
    function getAppInfo(instance, callback) {
        if (!instance.apeMarketId)
            return void (callback && callback());
        if (!navigator.onLine) {
            let retained = localStorage.getItem("app-inf-" + instance.apeMarketId);
            if (retained && retained.trim().length > 5) {
                try {
                    let ob = JSON.parse(retained);
                    parseOutAppInfo(instance, ob)
                } catch (ex) {
                    console.log(ex),
                    localStorage.removeItem("app-inf-" + instance.apeMarketId)
                }
                callback && callback()
            }
            return
        }
        let url = "https://market.ape-apps.com/app_resources/appinfo.php?app=" + instance.apeMarketId
          , xhr = new XMLHttpRequest;
        xhr.open("get", url, !0),
        xhr.addEventListener("load", (function(e) {
            let res = e.target.responseText;
            if (res && res.trim().length > 0)
                try {
                    let ob = JSON.parse(res);
                    parseOutAppInfo(instance, ob),
                    localStorage.setItem("app-inf-" + instance.apeMarketId, res)
                } catch (ex) {
                    console.log(ex)
                }
            callback && callback()
        }
        )),
        xhr.send()
    }
    function showApeCoinFlow(callback) {
        let instance = this;
        if (instance.platform == PLATFORM_CODES.GOOGLE_PLAY || instance.platform == PLATFORM_CODES.AMAZON || instance.platform == PLATFORM_CODES.APPLE || isUWPChild)
            return void mobileCoinPurchaseFlow(instance, callback);
        if (!instance.loginCreds || !instance.profileData || !adl)
            return;
        let useval = 5;
        adl.showDialog({
            title: "Purchase Ape Coins",
            message: "You may add Ape Coins to your account at a rate of 100 coins per $1.  How many Ape Coins would you like to add?",
            icon: "https://www.apewebapps.com/images/ape-coin.png",
            slider: {
                min: 1,
                max: 100,
                value: 5,
                status: "Purchase " + 100 * useval + " = $" + useval + ".00",
                onChange: function(value, update) {
                    useval = parseInt(value),
                    update("Purchase " + 100 * useval + " = $" + useval + ".00")
                }
            },
            buttons: [{
                text: "Dismiss"
            }, {
                text: "Payment",
                color: "#4CAF50",
                sliderResult: !0,
                func: function(result) {
                    if (result && !isNaN(result) && parseInt(result) > 0) {
                        const coins = Math.round(100 * parseInt(result));
                        if (instance.platform == PLATFORM_CODES.STEAM)
                            return void purchaseApeCoinsViaSteam(instance, coins);
                        const iapURL = "https://accounts.ape-apps.com/buycoinsext.php?id=" + instance.apeMarketId + "&a=" + instance.loginCreds.sida + "&b=" + instance.loginCreds.sidb + "&c=" + instance.loginCreds.sidc + "&amt=" + coins;
                        coinBuyWindow = window.open(iapURL, "coinbuy", "height=620,width=500,status=no,titlebar=no,modal=yes,resizable=yes,menubar=no,frame=true"),
                        coinBuyCallback = callback
                    }
                }
            }]
        })
    }
    function showFeedbackDialog() {
        let instance = this;
        adl && adl.inputBox({
            title: "Send Feedback",
            message: instance.appName + " is developed with you in mind, and I am always looking for ways to expand and improve the app.  Please leave me a suggestion/feedback/tip/bug report in the box below.  Updates are made based on user suggestions, and your feedback goes straight to my inbox and will help me make improvements to " + instance.appName + " in the coming releases!",
            multiline: !0,
            password: !1,
            placeholder: "Enter feedback here!",
            func: function(result) {
                if (result && result.trim().length > 0) {
                    let feedbackText = result.trim()
                      , ape = "";
                    instance.loginCreds && instance.profileData && (ape = instance.profileData.un);
                    let device = navigator.appVersion;
                    device = "awa";
                    let formData = new FormData;
                    formData.append("a", instance.apeMarketId),
                    formData.append("p", instance.platform),
                    formData.append("c", feedbackText),
                    formData.append("v", instance.version),
                    formData.append("d", device),
                    formData.append("ape", ape);
                    let xhr = new XMLHttpRequest;
                    xhr.open("post", "https://market.ape-apps.com/app_resources/feedback.php", !0),
                    xhr.addEventListener("load", (function() {
                        adl.showToast({
                            message: "Thank you for your feedback!",
                            icon: "fluent.&#xE119;"
                        })
                    }
                    )),
                    xhr.send(formData)
                }
            }
        })
    }
    function handleLicenseKeyData(data) {
        const instance = this;
        this && negotiateApeMarketKey(this, data)
    }
    function negotiateApeMarketKey(instance, contents) {
        if (instance.isUserPremium())
            return;
        let keyContent = null
          , keyObject = null;
        try {
            keyContent = atob(contents),
            keyObject = JSON.parse(keyContent)
        } catch (e) {
            return void (adl && adl.showDialog({
                title: "License Key Error",
                message: "Unable to read this license key file.  It may have become damaged or corrupt.",
                icon: "fluent.&#xE171;",
                iconColor: "#F44336"
            }))
        }
        if (keyObject.appid != instance.apeMarketId)
            return void (adl && adl.showDialog({
                title: "Incorrect License Key",
                message: "This license key is not for " + instance.appName + ".  Ape Market License Keys can only be used with the product that they were generated for.",
                icon: "fluent.&#xE171;",
                iconColor: "#F44336"
            }));
        let requestURL = "https://market.ape-apps.com/app_resources/activate_product.php"
          , formData = new FormData;
        formData.append("id", keyObject.appid),
        formData.append("key", keyObject.keyid),
        keyObject.license ? formData.append("license", keyObject.license) : keyObject.vlicense && (requestURL = "https://market.ape-apps.com/app_resources/volume_activation.php",
        formData.append("license", keyObject.vlicense),
        formData.append("phrase", keyObject.phraseid));
        let xhr = new XMLHttpRequest;
        xhr.open("post", requestURL, !0),
        xhr.addEventListener("load", (function(e) {
            let resData = e.target.responseText;
            resData && "success" == resData.trim() ? (adl && adl.showDialog({
                title: "Activation Successful",
                message: "Your product has been activated.  Thank you for your support!",
                icon: "fluent.&#xE11D;",
                iconColor: "#4CAF50"
            }),
            notifyPremiumUpgrade(instance, "1")) : adl && adl.showDialog({
                title: "Activation Error",
                message: resData,
                icon: "fluent.&#xE171;",
                iconColor: "#F44336"
            })
        }
        )),
        xhr.send(formData)
    }
    function getMobileExportMethod(mime) {
        let type = "text";
        return 0 == mime.indexOf("image/") && (type = "data"),
        0 == mime.indexOf("audio/") && (type = "data"),
        type
    }
    function notifyPremiumUpgrade(instance, status) {
        let statusData = buildAccountsAPICreds(instance, "4");
        if (!statusData)
            return localStorage.setItem("app-ret-pre-" + instance.apeMarketId, status),
            void (instance.onPremium && instance.onPremium());
        statusData.append("lp", instance.platform),
        statusData.append("returl", "app"),
        statusData.append("ls", status),
        makeAccountsAPIRequest(statusData, (function() {
            localStorage.setItem("app-ret-pre-" + instance.apeMarketId, status),
            instance.onPremium && instance.onPremium()
        }
        ))
    }
    function settleAccountPlatformPremium(instance) {
        instance.loginCreds && instance.profileData && "1" != instance.profileData.pre && (window.Android && window.Android.getHostPremium && (Android.getHostPremium() ? notifyPremiumUpgrade(instance, "1") : notifyPremiumUpgrade(instance, "0")),
        window.webkit && window.webkit.messageHandlers && window.webkit.messageHandlers.getHostPremium && notifyPremiumUpgrade(instance, iosPremiumStatus))
    }
    function hostPremiumChange() {
        let instance = this
          , ret = "0";
        checkAndRet(instance) && (ret = "1"),
        "1" == ret ? notifyPremiumUpgrade(instance, ret) : window.Android && window.Android.getHostPremium ? Android.getHostPremium() ? notifyPremiumUpgrade(instance, "1") : notifyPremiumUpgrade(instance, "0") : notifyPremiumUpgrade(instance, ret)
    }
    function checkAndRet(instance) {
        let ret = "0"
          , sto = localStorage.getItem("am" + instance.apeMarketId + "tmp-host-ret");
        return sto && sto.trim().length > 0 && (ret = sto),
        "1" == ret
    }
    function showHostBanner() {
        window.Android && window.Android.showBanner && Android.showBanner(),
        window.webkit && window.webkit.messageHandlers && window.webkit.messageHandlers.showBanner && webkit.messageHandlers.showBanner.postMessage("placeholder")
    }
    function removeHostBanner() {
        window.Android && window.Android.removeBanner && Android.removeBanner(),
        window.webkit && window.webkit.messageHandlers && window.webkit.messageHandlers.removeBanner && webkit.messageHandlers.removeBanner.postMessage("placeholder")
    }
    function setupHostedListeners() {
        window.iosHostMessageReturn = function(method, datStr) {
            if ("premStatus" == method && (iosPremiumStatus = datStr.toString().trim(),
            "1" != iosPremiumStatus && (iosPremiumStatus = "0"),
            performGlobalPremiumNotice(iosPremiumStatus)),
            "skuStatus" == method) {
                let parts = datStr.toString().trim().split(":");
                if (2 == parts.length) {
                    let sku, status;
                    setGlobalSKUStatus(parts[0], parts[1])
                }
            }
            if ("skuPurchased" == method) {
                const parts = datStr.toString().trim().split(":");
                if (2 == parts.length) {
                    const sku = parts[0]
                      , orderid = parts[1];
                    performGlobalSKUPurchaseNotice(sku, orderid)
                }
            }
        }
        ,
        window.onSKUStatus = function(sku, status) {
            setGlobalSKUStatus(sku, status)
        }
        ,
        window.onSKUPurchased = function(sku, orderid) {
            performGlobalSKUPurchaseNotice(sku, orderid)
        }
        ,
        window.platformPremiumChange = function() {
            performGlobalPremiumNotice()
        }
        ,
        window.exportBlobToAndroid = function(blobURL) {
            let xhr = new XMLHttpRequest;
            xhr.open("get", blobURL, !0),
            xhr.responseType = "blob",
            xhr.onload = function() {
                let blob = xhr.response
                  , expType = getMobileExportMethod(blob.type)
                  , reader = new FileReader;
                reader.onload = function() {
                    let base = reader.result;
                    "data" == expType && Android.onBlobExport(blobURL, base, blob.type),
                    "text" == expType && Android.onTextExport(blobURL, base, blob.type),
                    window.URL.revokeObjectURL(blob)
                }
                ,
                "data" == expType && reader.readAsDataURL(blob),
                "text" == expType && reader.readAsText(blob)
            }
            ,
            xhr.send()
        }
    }
    function setGlobalSKUStatus(sku, status) {
        if (sku)
            for (let id in allInstances) {
                let instance = allInstances[id];
                sku != instance.gpPrmSku && sku != instance.amzPrmSku && sku != instance.iosPrmSku && sku != instance.winPrmSku || (localStorage.setItem("am" + instance.apeMarketId + "tmp-host-ret", status.toString()),
                instance.hostPremiumChange())
            }
    }
    async function performGlobalSKUPurchaseNotice(sku, orderid) {
        if (!sku)
            return;
        sku = sku.trim();
        let coinsVerified = !1;
        for (let id in allInstances) {
            const instance = allInstances[id];
            if (sku == instance.gpPrmSku || sku == instance.amzPrmSku || sku == instance.iosPrmSku || sku == instance.winPrmSku) {
                if (localStorage.setItem("am" + instance.apeMarketId + "tmp-host-ret", "1"),
                instance.hostPremiumChange(),
                purchWasPending) {
                    const postBody = "a=" + instance.apeMarketId + "&p=" + instance.platform + "&pr=" + instance.price + "&sp=" + instance.subplatform;
                    try {
                        const xmlhttp = new XMLHttpRequest;
                        xmlhttp.open("POST", STAT_LOGGER_API_SALE, !0),
                        xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded"),
                        xmlhttp.send(postBody)
                    } catch (err) {}
                    purchWasPending = !1
                }
                return
            }
            if (!coinsVerified) {
                let coinHold = null
                  , coinsToReport = 0;
                if (instance.platform == PLATFORM_CODES.GOOGLE_PLAY && (coinHold = "gplay"),
                instance.platform == PLATFORM_CODES.AMAZON && (coinHold = "amazon"),
                instance.platform == PLATFORM_CODES.APPLE && (coinHold = "ios"),
                instance.platform == PLATFORM_CODES.WINDOWS && isUWPChild && (coinHold = "winstore"),
                coinHold) {
                    let coinArr = instance.apeCoinSKUs[coinHold];
                    for (let i = 0; i < coinArr.length; i++) {
                        let si = coinArr[i];
                        si.sku == sku && (coinsToReport = si.val)
                    }
                    if (coinsToReport && coinsToReport > 0) {
                        let formData = new FormData;
                        formData.append("id", instance.apeMarketId),
                        formData.append("a", instance.loginCreds.sida),
                        formData.append("b", instance.loginCreds.sidb),
                        formData.append("c", instance.loginCreds.sidc),
                        formData.append("amt", coinsToReport),
                        formData.append("src", coinHold),
                        formData.append("sku", sku),
                        formData.append("oid", orderid);
                        let response = await fetch("https://accounts.ape-apps.com/checkmobilepurchase.php", {
                            method: "POST",
                            body: formData
                        })
                          , result = await response.json();
                        if (coinsVerified = !0,
                        result && result.success) {
                            let balance = parseInt(result.balance);
                            instance.profileData && (instance.profileData.bal = balance),
                            adl.showToast({
                                message: "Ape Coins Purchased, balance: " + balance
                            })
                        } else {
                            let errorCode = "ex06";
                            adl.showDialog({
                                title: "Coin Purchase Error",
                                message: "There was an error applying Ape Coins to your account.  Please contact support@ape-apps.com and provide error code: " + errorCode
                            })
                        }
                    }
                }
            }
        }
    }
    function performGlobalPremiumNotice(status) {
        null != status && null != status || (status = "1");
        for (let id in allInstances) {
            let instance = allInstances[id];
            if (localStorage.setItem("am" + instance.apeMarketId + "tmp-host-ret", status),
            instance.hostPremiumChange(),
            purchWasPending && "1" == status) {
                let postBody = "a=" + instance.apeMarketId + "&p=" + instance.platform + "&pr=" + instance.price + "&sp=" + instance.subplatform;
                try {
                    let xmlhttp = new XMLHttpRequest;
                    xmlhttp.open("POST", STAT_LOGGER_API_SALE, !0),
                    xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded"),
                    xmlhttp.send(postBody)
                } catch (err) {}
            }
        }
        purchWasPending = !1
    }
    function showGenericAboutWindow(firstBuildYear) {
        if (!adl)
            return;
        let instance = this
          , updateString = firstBuildYear + "-" + this.updateYear;
        parseInt(firstBuildYear) == this.updateYear && (updateString = firstBuildYear);
        let urlName = replaceAll(this.appName, " ", "-").toLowerCase()
          , myDomElement = document.createElement("div")
          , elementImg = document.createElement("img");
        elementImg.src = "https://market.ape-apps.com/app_resources/getfeature.php?a=" + urlName,
        elementImg.draggable = !1,
        elementImg.style.width = "100%",
        myDomElement.appendChild(elementImg);
        let infoElement = document.createElement("p");
        infoElement.style.fontWeight = "bold",
        infoElement.style.textAlign = "center",
        infoElement.innerHTML = this.appName + " v" + this.version + " Copyright &copy; " + updateString + " Ape Apps, LLC",
        myDomElement.appendChild(infoElement),
        adl.showDialog({
            title: "About " + this.appName,
            customElement: myDomElement,
            buttons: [{
                text: "Ape Apps Website",
                func: function() {
                    window.open("https://www.ape-apps.com", "_blank")
                }
            }, {
                text: "Dismiss"
            }]
        })
    }
    function showDelActDialog(instance) {
        adl.showDialog({
            title: "Delete Account",
            message: "If you continue, you will be signed out of the app and taken to the account management portal where you can delete your Ape Apps Account.  This cannot be undone!",
            icon: "fluent.&#xE1E0;",
            iconColor: "#F44336",
            buttons: [{
                text: "Accounts Portal",
                color: "#F44336",
                func: function() {
                    let useURL = "https://accounts.ape-apps.com/unregister.php";
                    instance.profileData && (useURL += "?un=" + instance.profileData.un),
                    window.open(useURL, "_blank"),
                    instance.signOutOfApeApps(),
                    instance.onLogin && instance.onLogin()
                }
            }, {
                text: "Cancel"
            }]
        })
    }
    function quitApplication(withData) {
        let instance = this
          , datStr = null;
        withData && (datStr = JSON.stringify(withData)),
        window.Android && window.Android.quitApplication ? window.Android.quitApplication(datStr) : window.webkit && window.webkit.messageHandlers && window.webkit.messageHandlers.quitApplication ? webkit.messageHandlers.quitApplication.postMessage(datStr) : isUWPChild ? window.chrome.webview.postMessage({
            type: "quitApp",
            data: ""
        }) : isInstanceApeChild(instance) ? postMsgToApeParent(instance, "quitApplication", withData) : wacUtils ? isInstanceApeChild(instance) ? wacUtils.ipcSend("closeCurrentWindow", withData) : wacUtils.ipcSend("doQuitApp", withData) : (document.getElementsByTagName("html")[0].remove(),
        window.open("", "_self", ""),
        window.close())
    }
    function isInstanceApeChild(instance) {
        return instance.platform == PLATFORM_CODES.EZ_OFFICE_LAUNCHER || instance.platform == PLATFORM_CODES.APE_FORUMS || instance.platform == PLATFORM_CODES.APE_LAUNCHER || instance.platform == PLATFORM_CODES.SOUNDBOARD_CITY || instance.platform == PLATFORM_CODES.APE_VR_LAUNCHER || instance.platform == PLATFORM_CODES.APE_TV_LAUNCHER
    }
    function postMsgToApeParent(instance, func, dat) {
        if (wacUtils && wacUtilsParentWindowId)
            return void wacUtils.sendMessageToWindow(wacUtilsParentWindowId, {
                func: func,
                data: dat
            });
        let tgt = null;
        window.parent && window.parent.postMessage && (tgt = parent),
        window.opener && window.opener.postMessage && (tgt = window.opener),
        dat || (dat = {}),
        dat.instance = instance.uuid,
        dat.parent = instance.parentId,
        tgt && tgt.postMessage({
            func: func,
            data: dat
        }, "*")
    }
    function getTokensURL() {
        let instance = this
          , tokenURL = "https://apps.ape-apps.com/my-tokens/";
        return this.platform == PLATFORM_CODES.GOOGLE_PLAY && (tokenURL = "https://play.google.com/store/apps/details?id=com.ape.apps.my.tokens"),
        this.platform == PLATFORM_CODES.AMAZON && (tokenURL = "https://www.amazon.com/dp/B07DWDZ1HZ"),
        this.platform == PLATFORM_CODES.APPLE && (tokenURL = "https://apps.apple.com/us/app/my-tokens-by-ape-apps/id1373251412?ls=1"),
        this.platform == PLATFORM_CODES.WINDOWS && (tokenURL = "https://apps.microsoft.com/store/detail/my-tokens/9N7PWHCB6Z51"),
        this.platform == PLATFORM_CODES.APE_WEB_APPS && (tokenURL = "https://www.apewebapps.com/my-tokens/"),
        tokenURL
    }
    function isPremiumAvailable() {
        const instance = this
          , premium = instance.isUserPremium();
        if (premium)
            return !1;
        if (0 == instance.price)
            return !1;
        if (instance.platform == PLATFORM_CODES.GOOGLE_PLAY && !instance.gpPrmSku)
            return !1;
        if (instance.platform == PLATFORM_CODES.AMAZON && !instance.amzPrmSku)
            return !1;
        if (instance.platform == PLATFORM_CODES.APPLE && !instance.iosPrmSku)
            return !1;
        if (instance.platform == PLATFORM_CODES.WINDOWS && instance.isGame) {
            if (!isUWPChild)
                return !1;
            if (!instance.winPrmSku || instance.winPrmSku.trim().length < 4)
                return !1
        }
        return !0
    }
    function mobileCoinPurchaseFlow(instance, callback) {
        let coinHold = null;
        instance.platform == PLATFORM_CODES.GOOGLE_PLAY && (coinHold = "gplay"),
        instance.platform == PLATFORM_CODES.AMAZON && (coinHold = "amazon"),
        instance.platform == PLATFORM_CODES.APPLE && (coinHold = "ios"),
        instance.platform == PLATFORM_CODES.WINDOWS && isUWPChild && (coinHold = "winstore");
        let purchaseOptions = [];
        if (coinHold) {
            let coinArr = instance.apeCoinSKUs[coinHold];
            for (let i = 0; i < coinArr.length; i++) {
                let si = coinArr[i];
                purchaseOptions.push({
                    tag: si.sku,
                    title: si.val + " Ape Coins",
                    icon: "https://www.apewebapps.com/images/ape-coin.png",
                    compactItem: !0
                })
            }
        }
        0 != purchaseOptions.length && (1 != purchaseOptions.length ? adl.showList({
            title: "Purchase Ape Coins",
            options: purchaseOptions,
            onSelection: function(tag) {
                onMobileCoinSkuSelected(instance, tag, callback)
            },
            flyout: {
                position: "right"
            }
        }) : onMobileCoinSkuSelected(instance, purchaseOptions[0].tag, callback))
    }
    function onMobileCoinSkuSelected(instance, tag, callback) {
        !tag || tag.trim().length < 2 || (isUWPChild && window.chrome.webview.postMessage({
            type: "purchaseSKUAndConsume",
            data: tag
        }),
        instance.platform != PLATFORM_CODES.GOOGLE_PLAY && instance.platform != PLATFORM_CODES.AMAZON || window.Android.purchaseSKU && Android.purchaseSKU(tag, !0),
        instance.platform == PLATFORM_CODES.APPLE && window.webkit && window.webkit.messageHandlers && window.webkit.messageHandlers.purchaseSKU && webkit.messageHandlers.purchaseSKU.postMessage(tag))
    }
    function verifyHostedPremiumStatus(instance) {
        window.Android && window.Android.checkSKU && (instance.platform == PLATFORM_CODES.GOOGLE_PLAY && instance.gpPrmSku && window.Android.checkSKU(instance.gpPrmSku),
        instance.platform == PLATFORM_CODES.AMAZON && instance.amzPrmSku && window.Android.checkSKU(instance.amzPrmSku)),
        instance.platform == PLATFORM_CODES.APPLE && instance.iosPrmSku && (window.webkit && window.webkit.messageHandlers && window.webkit.messageHandlers.checkSKU ? webkit.messageHandlers.checkSKU.postMessage(instance.iosPrmSku) : window.webkit && window.webkit.messageHandlers && window.webkit.messageHandlers.getHostPremium && webkit.messageHandlers.getHostPremium.postMessage("placeholder")),
        isUWPChild && instance.winPrmSku && window.chrome.webview.postMessage({
            type: "checkSKU",
            data: instance.winPrmSku
        })
    }
    function spendApeCoins(amount, itemid, callback) {
        if (itemid || (itemid = "noid"),
        !amount)
            return;
        let instance = this
          , spendData = buildAccountsAPICreds(instance, "18");
        spendData && (spendData.append("amt", amount),
        spendData.append("item", itemid),
        makeAccountsAPIRequest(spendData, (function(resDat) {
            resDat && resDat.success ? (null != resDat.balance && (instance.profileData.bal = parseInt(resDat.balance)),
            callback(instance.profileData.bal)) : adl.showDialog({
                title: "Purchase Failed!",
                message: "Your Ape Coin purchase failed with error: " + resDat.reason,
                icon: "https://www.apewebapps.com/images/ape-coin.png"
            })
        }
        )))
    }
    function titleBarColorChecker(instance) {
        const metaThemeColor = document.querySelector("meta[name=theme-color]");
        if (metaThemeColor) {
            let colorVal = metaThemeColor.getAttribute("content");
            if (colorVal && colorVal.trim().length > 0 && (colorVal.indexOf("rgb") > -1 && (colorVal = parseColor(colorVal).hex),
            colorVal && 7 == colorVal.trim().length && lastTitleBarColor != colorVal.trim())) {
                if (lastTitleBarColor = colorVal.trim(),
                window.Android && window.Android.setStatusBar)
                    return void window.Android.setStatusBar(lastTitleBarColor);
                if (window.apeApps.wacBridge && window.apeApps.wacBridge.setTitleBarColor)
                    return void window.apeApps.wacBridge.setTitleBarColor(lastTitleBarColor);
                if (isUWPChild)
                    return void window.chrome.webview.postMessage({
                        type: "setTitleBar",
                        data: lastTitleBarColor
                    });
                if (isInstanceApeChild(instance))
                    return void postMsgToApeParent(instance, "setTitleBar", lastTitleBarColor)
            }
        }
    }
    function doUWPFileImport(typesStr, callback) {
        isUWPChild && (hostFileImportCallbacksCounter++,
        hostFileImportCallbacks[hostFileImportCallbacksCounter] = callback,
        window.chrome.webview.postMessage({
            type: "requestFileImport",
            data: typesStr + ":" + hostFileImportCallbacksCounter
        }))
    }
    function handleUWPFileImportResponse(data) {
        if (data.callbackId) {
            let callback = hostFileImportCallbacks[data.callbackId];
            callback && callback({
                name: data.filename,
                content: data.filetext
            })
        }
    }
    function setAppScale(scale) {
        currentAppScale = scale,
        1 == scale && (currentAppScale = null),
        document.body.style.zoom = currentAppScale
    }
    function pingForRating(forceShow=!1) {
        if (!window.adl)
            return void console.log("no ADL library, cannot rate");
        const instance = this;
        if (!instance.apeMarketId)
            return;
        const rateSetting = instance.apeMarket + "-rate-count";
        if (forceShow)
            return void showRateDialog(instance, rateSetting, forceShow);
        let rateCount = 0;
        const rateCountStr = localStorage.getItem(rateSetting);
        rateCountStr && rateCountStr.trim().length > 0 && (rateCount = parseInt(rateCountStr)),
        isNaN(rateCount) && (rateCount = 0),
        rateCount++,
        localStorage.setItem(rateSetting, rateCount.toString()),
        5 == rateCount && showRateDialog(instance, rateSetting, forceShow)
    }
    function showRateDialog(instance, rateSetting, forceShow) {
        if (instance.platform == PLATFORM_CODES.APPLE && window.webkit && window.webkit.messageHandlers && window.webkit.messageHandlers.requestAppleRateWindow && !forceShow)
            return void window.webkit.messageHandlers.requestAppleRateWindow.postMessage("placeholder");
        let rateURL = instance.rateLinks[PLATFORM_CODES.APE_MARKET];
        if (instance.rateLinks[instance.platform] && (rateURL = instance.rateLinks[instance.platform]),
        forceShow)
            return void engageUserRating(instance, rateSetting, rateURL);
        let us = "using";
        instance.isGame && (us = "playing");
        const msg = "Hi!  Thanks for " + us + " " + instance.appName + ".  Would you please rate/comment " + instance.appName + " for me?  I'd love you forever.  Also, I update frequently based on feedback, so leave suggestions in the store on how to improve the app.  Thanks!"
          , title = "Please Rate " + instance.appName;
        adl.showDialog({
            title: title,
            message: msg,
            icon: "fluent.&#xE170;",
            buttons: [{
                text: "No way, loser!",
                color: "#F44336",
                func: function() {
                    localStorage.setItem(rateSetting, "-8")
                }
            }, {
                text: "Sure Thing!",
                color: "#4CAF50",
                func: function() {
                    engageUserRating(instance, rateSetting, rateURL)
                }
            }]
        })
    }
    function engageUserRating(instance, rateSetting, rateURL) {
        if (localStorage.setItem(rateSetting, "6"),
        instance.platform == PLATFORM_CODES.GOOGLE_PLAY && window.Android && window.Android.presentGplayRateWindow)
            window.Android.presentGplayRateWindow();
        else if (instance.platform != PLATFORM_CODES.APE_FORUMS) {
            if ((instance.platform == PLATFORM_CODES.NONE || instance.platform == PLATFORM_CODES.APE_MARKET || instance.platform == PLATFORM_CODES.APE_WEB_APPS || instance.platform == PLATFORM_CODES.APE_LAUNCHER || instance.platform == PLATFORM_CODES.SOUNDBOARD_CITY || instance.platform == PLATFORM_CODES.APE_VR_LAUNCHER || instance.platform == PLATFORM_CODES.APE_TV_LAUNCHER || instance.platform == PLATFORM_CODES.APE_FORUMS || instance.platform == PLATFORM_CODES.EZ_OFFICE_LAUNCHER) && adl && instance.loginCreds && instance.profileData) {
                let commentInput = null;
                const customRateElement = document.createElement("div")
                  , appIntoTopBoxRating = document.createElement("div");
                appIntoTopBoxRating.style.textAlign = "center",
                appIntoTopBoxRating.style.userSelect = "none";
                for (let i = 1; i <= 5; i++) {
                    const star = document.createElement("span");
                    star.innerHTML = "&starf;",
                    star.style.fontSize = "x-large",
                    star.style.margin = "2px 4px",
                    star.style.color = "#555555",
                    star.style.display = "inline-block",
                    star.style.cursor = "pointer",
                    star.className = "star adlGamepadSelectable",
                    star.id = "rateStar" + i,
                    star.holderRef = appIntoTopBoxRating,
                    star.rateRef = i,
                    star.instanceRef = instance,
                    star.onclick = doRateStar,
                    star.title = "Give " + i + " star rating",
                    appIntoTopBoxRating.appendChild(star)
                }
                return customRateElement.appendChild(appIntoTopBoxRating),
                instance.isTV || instance.isVR || (commentInput = document.createElement("textarea"),
                commentInput.className = "adl adlGamepadSelectable",
                commentInput.placeholder = "review comments",
                commentInput.style.marginTop = "8px",
                customRateElement.appendChild(commentInput)),
                void adl.showDialog({
                    title: "Please Rate " + instance.appName,
                    customElement: customRateElement,
                    buttons: [{
                        text: "Cancel",
                        color: "#F44336"
                    }, {
                        text: "Submit",
                        func: function() {
                            if (commentInput) {
                                const review = commentInput.value.trim();
                                if (review && review.length > 0) {
                                    const formData = new FormData;
                                    formData.append("f", "44"),
                                    formData.append("sida", instance.loginCreds.sida),
                                    formData.append("sidb", instance.loginCreds.sidb),
                                    formData.append("sidc", instance.apeAccountKey),
                                    formData.append("app", instance.apeMarketId),
                                    formData.append("ak", instance.apeAccountKey),
                                    formData.append("am", instance.apeMarketId),
                                    formData.append("comment", review),
                                    formData.append("url", rateURL),
                                    fetch("https://www.ape-apps.com/api.php", {
                                        method: "post",
                                        body: formData
                                    }).then((function() {
                                        adl.showToast({
                                            message: "Thank you for rating!",
                                            icon: "fluent.&#xE119;"
                                        })
                                    }
                                    ))
                                }
                            }
                        },
                        color: "#4CAF50"
                    }]
                })
            }
            window.open(rateURL, "_blank")
        }
    }
    async function doRateStar() {
        const instance = this.instanceRef
          , holder = this.holderRef
          , starRating = this.rateRef;
        if (!instance || !holder || !starRating)
            return;
        const formData = new FormData;
        formData.append("a", instance.apeMarketId),
        formData.append("r", starRating),
        await fetch("https://market.ape-apps.com/rate_app.php", {
            method: "post",
            body: formData
        });
        const stars = holder.querySelectorAll(".star");
        for (let i = 0; i < stars.length; i++) {
            const star = stars[i];
            star.rateRef > starRating ? star.style.color = "#555555" : star.style.color = "#FFC107"
        }
    }
    function getDiscordLink(callback) {
        fetch("https://www.ape-apps.com/discordlink.php").then((async function(response) {
            const link = await response.text();
            link && link.trim().length > 4 && callback(link.trim())
        }
        ))
    }
    function purchaseApeCoinsViaSteam(instance, coins) {
        const initURL = "https://accounts.ape-apps.com/initsteamcoinpurch.php"
          , steamUser = instance.profileData.ste
          , steamApp = instance.steamAppId
          , reqParms = new FormData;
        reqParms.append("stu", steamUser),
        reqParms.append("sta", steamApp),
        reqParms.append("amt", coins),
        reqParms.append("am", instance.apeMarketId),
        reqParms.append("sida", instance.loginCreds.sida),
        reqParms.append("sidb", instance.loginCreds.sidb),
        fetch(initURL, {
            method: "post",
            body: reqParms
        }).then((async function(response) {
            const result = await response.json();
            if (result && result.gourl && result.transid && result.steamtx && result.orderid) {
                const appendURL = "https://accounts.ape-apps.com/verifysteamcoinpurch.php?oid=" + result.orderid
                  , nextURL = result.gourl + "?returnurl=" + encodeURI(appendURL);
                instance.pendingSteamPurchase = !0,
                wacUtils.ipcSend("openURLInSteam", nextURL)
            } else
                adl.showDialog({
                    title: "debug response",
                    message: JSON.stringify(result)
                })
        }
        ))
    }
    function parseColor(color) {
        var arr = [];
        return color.replace(/[\d+\.]+/g, (function(v) {
            arr.push(parseFloat(v))
        }
        )),
        {
            hex: "#" + arr.slice(0, 3).map(toHex).join(""),
            opacity: 4 == arr.length ? arr[3] : 1
        }
    }
    function toHex(int) {
        var hex = int.toString(16);
        return 1 == hex.length ? "0" + hex : hex
    }
    function updateLogUserPlaytime(instance) {
        if (!navigator.onLine)
            return;
        if (!instance.loginCreds || !instance.profileData)
            return;
        const creds = buildAccountsAPICreds(instance, "24");
        creds && (creds.append("plt", 1),
        makeAccountsAPIRequest(creds, (function() {}
        )))
    }
    function handleUserXboxInfo(instance, info) {
        instance.currentXboxInfo = info
    }
    window.wacUtils2 && (wacUtils = window.wacUtils2,
    wacUtilsParentWindowId = await wacUtils.ipcInvoke("getParentWindowId", null),
    wacUtils.ipcSend("setApplicationMenu", null)),
    setInterval(refreshAccountCredentials, 216e5)
}();
